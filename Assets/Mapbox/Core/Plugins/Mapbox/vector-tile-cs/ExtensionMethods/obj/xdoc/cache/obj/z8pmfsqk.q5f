id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Mapbox.VectorTile
  commentId: N:Mapbox.VectorTile
  language: CSharp
  name:
    CSharp: Mapbox.VectorTile
    VB: Mapbox.VectorTile
  nameWithType:
    CSharp: Mapbox.VectorTile
    VB: Mapbox.VectorTile
  qualifiedName:
    CSharp: Mapbox.VectorTile
    VB: Mapbox.VectorTile
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Mapbox.VectorTile.PbfReader
    commentId: T:Mapbox.VectorTile.PbfReader
    language: CSharp
    name:
      CSharp: PbfReader
      VB: PbfReader
    nameWithType:
      CSharp: PbfReader
      VB: PbfReader
    qualifiedName:
      CSharp: Mapbox.VectorTile.PbfReader
      VB: Mapbox.VectorTile.PbfReader
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile
    source:
      id: PbfReader
      path: ''
      startLine: 6177
    summary: "\nLow level protobuf (PBF) decoder https://developers.google.com/protocol-buffers/docs/overview\n"
    example: []
    syntax:
      content:
        CSharp: public class PbfReader
        VB: Public Class PbfReader
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Mapbox.VectorTile.PbfReader.Tag
      commentId: P:Mapbox.VectorTile.PbfReader.Tag
      language: CSharp
      name:
        CSharp: Tag
        VB: Tag
      nameWithType:
        CSharp: PbfReader.Tag
        VB: PbfReader.Tag
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.Tag
        VB: Mapbox.VectorTile.PbfReader.Tag
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Tag
        path: ''
        startLine: 6182
      summary: Tag at current position
      example: []
      syntax:
        content:
          CSharp: public int Tag { get; }
          VB: Public ReadOnly Property Tag As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Mapbox.VectorTile.PbfReader.Tag*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Mapbox.VectorTile.PbfReader.Value
      commentId: P:Mapbox.VectorTile.PbfReader.Value
      language: CSharp
      name:
        CSharp: Value
        VB: Value
      nameWithType:
        CSharp: PbfReader.Value
        VB: PbfReader.Value
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.Value
        VB: Mapbox.VectorTile.PbfReader.Value
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Value
        path: ''
        startLine: 6184
      summary: Value at current position
      example: []
      syntax:
        content:
          CSharp: public ulong Value { get; }
          VB: Public ReadOnly Property Value As ULong
        parameters: []
        return:
          type: System.UInt64
      overload: Mapbox.VectorTile.PbfReader.Value*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Mapbox.VectorTile.PbfReader.WireType
      commentId: P:Mapbox.VectorTile.PbfReader.WireType
      language: CSharp
      name:
        CSharp: WireType
        VB: WireType
      nameWithType:
        CSharp: PbfReader.WireType
        VB: PbfReader.WireType
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.WireType
        VB: Mapbox.VectorTile.PbfReader.WireType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: WireType
        path: ''
        startLine: 6187
      summary: Wire type at current position
      example: []
      syntax:
        content:
          CSharp: public WireTypes WireType { get; }
          VB: Public ReadOnly Property WireType As WireTypes
        parameters: []
        return:
          type: WireTypes
      overload: Mapbox.VectorTile.PbfReader.WireType*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Mapbox.VectorTile.PbfReader.#ctor(System.Byte[])
      commentId: M:Mapbox.VectorTile.PbfReader.#ctor(System.Byte[])
      language: CSharp
      name:
        CSharp: PbfReader(Byte[])
        VB: PbfReader(Byte())
      nameWithType:
        CSharp: PbfReader.PbfReader(Byte[])
        VB: PbfReader.PbfReader(Byte())
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.PbfReader(System.Byte[])
        VB: Mapbox.VectorTile.PbfReader.PbfReader(System.Byte())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: .ctor
        path: ''
        startLine: 6199
      summary: "\nPbfReader constructor\n"
      example: []
      syntax:
        content:
          CSharp: public PbfReader(byte[] tileBuffer)
          VB: Public Sub New(tileBuffer As Byte())
        parameters:
        - id: tileBuffer
          type: System.Byte[]
          description: Byte array containing the raw (already unzipped) tile data
      overload: Mapbox.VectorTile.PbfReader.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.Varint
      commentId: M:Mapbox.VectorTile.PbfReader.Varint
      language: CSharp
      name:
        CSharp: Varint()
        VB: Varint()
      nameWithType:
        CSharp: PbfReader.Varint()
        VB: PbfReader.Varint()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.Varint()
        VB: Mapbox.VectorTile.PbfReader.Varint()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Varint
        path: ''
        startLine: 6212
      summary: "\n<p>Gets Varint at current position, moves to position after Varint.</p>\n<p>Throws exception if Varint cannot be decoded</p>\n"
      example: []
      syntax:
        content:
          CSharp: public long Varint()
          VB: Public Function Varint As Long
        return:
          type: System.Int64
          description: Decoded Varint
      overload: Mapbox.VectorTile.PbfReader.Varint*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.View
      commentId: M:Mapbox.VectorTile.PbfReader.View
      language: CSharp
      name:
        CSharp: View()
        VB: View()
      nameWithType:
        CSharp: PbfReader.View()
        VB: PbfReader.View()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.View()
        VB: Mapbox.VectorTile.PbfReader.View()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: View
        path: ''
        startLine: 6239
      summary: "\n<p>Get a view into the buffer.</p>\n<p>TODO: refactor to return a DataView instead of a byte array</p>\n"
      example: []
      syntax:
        content:
          CSharp: public byte[] View()
          VB: Public Function View As Byte()
        return:
          type: System.Byte[]
          description: Byte array containing the view
      overload: Mapbox.VectorTile.PbfReader.View*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.GetPackedUnit32
      commentId: M:Mapbox.VectorTile.PbfReader.GetPackedUnit32
      language: CSharp
      name:
        CSharp: GetPackedUnit32()
        VB: GetPackedUnit32()
      nameWithType:
        CSharp: PbfReader.GetPackedUnit32()
        VB: PbfReader.GetPackedUnit32()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.GetPackedUnit32()
        VB: Mapbox.VectorTile.PbfReader.GetPackedUnit32()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetPackedUnit32
        path: ''
        startLine: 6265
      summary: "\nGet repeated `uint`s a current position, move position\n"
      example: []
      syntax:
        content:
          CSharp: public List<uint> GetPackedUnit32()
          VB: Public Function GetPackedUnit32 As List(Of UInteger)
        return:
          type: List{System.UInt32}
          description: List of decoded `uint`s
      overload: Mapbox.VectorTile.PbfReader.GetPackedUnit32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.GetPackedSInt32
      commentId: M:Mapbox.VectorTile.PbfReader.GetPackedSInt32
      language: CSharp
      name:
        CSharp: GetPackedSInt32()
        VB: GetPackedSInt32()
      nameWithType:
        CSharp: PbfReader.GetPackedSInt32()
        VB: PbfReader.GetPackedSInt32()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.GetPackedSInt32()
        VB: Mapbox.VectorTile.PbfReader.GetPackedSInt32()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetPackedSInt32
        path: ''
        startLine: 6278
      syntax:
        content:
          CSharp: public List<int> GetPackedSInt32()
          VB: Public Function GetPackedSInt32 As List(Of Integer)
        return:
          type: List{System.Int32}
      overload: Mapbox.VectorTile.PbfReader.GetPackedSInt32*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.GetPackedSInt64
      commentId: M:Mapbox.VectorTile.PbfReader.GetPackedSInt64
      language: CSharp
      name:
        CSharp: GetPackedSInt64()
        VB: GetPackedSInt64()
      nameWithType:
        CSharp: PbfReader.GetPackedSInt64()
        VB: PbfReader.GetPackedSInt64()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.GetPackedSInt64()
        VB: Mapbox.VectorTile.PbfReader.GetPackedSInt64()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetPackedSInt64
        path: ''
        startLine: 6291
      syntax:
        content:
          CSharp: public List<long> GetPackedSInt64()
          VB: Public Function GetPackedSInt64 As List(Of Long)
        return:
          type: List{System.Int64}
      overload: Mapbox.VectorTile.PbfReader.GetPackedSInt64*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.GetDouble
      commentId: M:Mapbox.VectorTile.PbfReader.GetDouble
      language: CSharp
      name:
        CSharp: GetDouble()
        VB: GetDouble()
      nameWithType:
        CSharp: PbfReader.GetDouble()
        VB: PbfReader.GetDouble()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.GetDouble()
        VB: Mapbox.VectorTile.PbfReader.GetDouble()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetDouble
        path: ''
        startLine: 6320
      summary: "\nGet double at current position, move to next position\n"
      example: []
      syntax:
        content:
          CSharp: public double GetDouble()
          VB: Public Function GetDouble As Double
        return:
          type: System.Double
          description: Decoded double
      overload: Mapbox.VectorTile.PbfReader.GetDouble*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.GetFloat
      commentId: M:Mapbox.VectorTile.PbfReader.GetFloat
      language: CSharp
      name:
        CSharp: GetFloat()
        VB: GetFloat()
      nameWithType:
        CSharp: PbfReader.GetFloat()
        VB: PbfReader.GetFloat()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.GetFloat()
        VB: Mapbox.VectorTile.PbfReader.GetFloat()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetFloat
        path: ''
        startLine: 6334
      summary: "\nGet float a current position, move to next position\n"
      example: []
      syntax:
        content:
          CSharp: public float GetFloat()
          VB: Public Function GetFloat As Single
        return:
          type: System.Single
          description: Decoded float
      overload: Mapbox.VectorTile.PbfReader.GetFloat*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.GetString(System.UInt64)
      commentId: M:Mapbox.VectorTile.PbfReader.GetString(System.UInt64)
      language: CSharp
      name:
        CSharp: GetString(UInt64)
        VB: GetString(UInt64)
      nameWithType:
        CSharp: PbfReader.GetString(UInt64)
        VB: PbfReader.GetString(UInt64)
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.GetString(System.UInt64)
        VB: Mapbox.VectorTile.PbfReader.GetString(System.UInt64)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetString
        path: ''
        startLine: 6349
      summary: "\nGet bytes as string\n"
      example: []
      syntax:
        content:
          CSharp: public string GetString(ulong length)
          VB: Public Function GetString(length As ULong) As String
        parameters:
        - id: length
          type: System.UInt64
          description: Number of bytes to read
        return:
          type: System.String
          description: Decoded string
      overload: Mapbox.VectorTile.PbfReader.GetString*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.NextByte
      commentId: M:Mapbox.VectorTile.PbfReader.NextByte
      language: CSharp
      name:
        CSharp: NextByte()
        VB: NextByte()
      nameWithType:
        CSharp: PbfReader.NextByte()
        VB: PbfReader.NextByte()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.NextByte()
        VB: Mapbox.VectorTile.PbfReader.NextByte()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: NextByte
        path: ''
        startLine: 6362
      summary: "\nMove to next byte and set wire type. Throws exeception if tag is out of range\n"
      example: []
      syntax:
        content:
          CSharp: public bool NextByte()
          VB: Public Function NextByte As Boolean
        return:
          type: System.Boolean
          description: Returns false if at end of buffer
      overload: Mapbox.VectorTile.PbfReader.NextByte*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.SkipVarint
      commentId: M:Mapbox.VectorTile.PbfReader.SkipVarint
      language: CSharp
      name:
        CSharp: SkipVarint()
        VB: SkipVarint()
      nameWithType:
        CSharp: PbfReader.SkipVarint()
        VB: PbfReader.SkipVarint()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.SkipVarint()
        VB: Mapbox.VectorTile.PbfReader.SkipVarint()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: SkipVarint
        path: ''
        startLine: 6387
      summary: "\nSkip over a Varint\n"
      example: []
      syntax:
        content:
          CSharp: public void SkipVarint()
          VB: Public Sub SkipVarint
      overload: Mapbox.VectorTile.PbfReader.SkipVarint*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.SkipBytes(System.UInt64)
      commentId: M:Mapbox.VectorTile.PbfReader.SkipBytes(System.UInt64)
      language: CSharp
      name:
        CSharp: SkipBytes(UInt64)
        VB: SkipBytes(UInt64)
      nameWithType:
        CSharp: PbfReader.SkipBytes(UInt64)
        VB: PbfReader.SkipBytes(UInt64)
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.SkipBytes(System.UInt64)
        VB: Mapbox.VectorTile.PbfReader.SkipBytes(System.UInt64)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: SkipBytes
        path: ''
        startLine: 6410
      summary: "\nSkip bytes\n"
      example: []
      syntax:
        content:
          CSharp: public void SkipBytes(ulong skip)
          VB: Public Sub SkipBytes(skip As ULong)
        parameters:
        - id: skip
          type: System.UInt64
          description: Number of bytes to skip
      overload: Mapbox.VectorTile.PbfReader.SkipBytes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.PbfReader.Skip
      commentId: M:Mapbox.VectorTile.PbfReader.Skip
      language: CSharp
      name:
        CSharp: Skip()
        VB: Skip()
      nameWithType:
        CSharp: PbfReader.Skip()
        VB: PbfReader.Skip()
      qualifiedName:
        CSharp: Mapbox.VectorTile.PbfReader.Skip()
        VB: Mapbox.VectorTile.PbfReader.Skip()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Skip
        path: ''
        startLine: 6425
      summary: "\nAutomatically skip bytes based on wire type\n"
      example: []
      syntax:
        content:
          CSharp: public ulong Skip()
          VB: Public Function Skip As ULong
        return:
          type: System.UInt64
          description: New position within the byte array
      overload: Mapbox.VectorTile.PbfReader.Skip*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Mapbox.VectorTile.VectorTile
    commentId: T:Mapbox.VectorTile.VectorTile
    language: CSharp
    name:
      CSharp: VectorTile
      VB: VectorTile
    nameWithType:
      CSharp: VectorTile
      VB: VectorTile
    qualifiedName:
      CSharp: Mapbox.VectorTile.VectorTile
      VB: Mapbox.VectorTile.VectorTile
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile
    source:
      id: VectorTile
      path: ''
      startLine: 6472
    summary: "\nClass to access the tile data\n"
    example: []
    syntax:
      content:
        CSharp: public class VectorTile
        VB: Public Class VectorTile
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Mapbox.VectorTile.VectorTile.#ctor(System.Byte[],System.Boolean)
      commentId: M:Mapbox.VectorTile.VectorTile.#ctor(System.Byte[],System.Boolean)
      language: CSharp
      name:
        CSharp: VectorTile(Byte[], Boolean)
        VB: VectorTile(Byte(), Boolean)
      nameWithType:
        CSharp: VectorTile.VectorTile(Byte[], Boolean)
        VB: VectorTile.VectorTile(Byte(), Boolean)
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTile.VectorTile(System.Byte[], System.Boolean)
        VB: Mapbox.VectorTile.VectorTile.VectorTile(System.Byte(), System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: .ctor
        path: ''
        startLine: 6482
      summary: "\nClass to access the tile data\n"
      example: []
      syntax:
        content:
          CSharp: public VectorTile(byte[] data, bool validate = true)
          VB: Public Sub New(data As Byte(), validate As Boolean = True)
        parameters:
        - id: data
          type: System.Byte[]
          description: Byte array containing the raw (already unzipped) tile data
        - id: validate
          type: System.Boolean
          description: If true, run checks if the tile contains valid data. Decreases decoding speed.
      overload: Mapbox.VectorTile.VectorTile.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTile.LayerNames
      commentId: M:Mapbox.VectorTile.VectorTile.LayerNames
      language: CSharp
      name:
        CSharp: LayerNames()
        VB: LayerNames()
      nameWithType:
        CSharp: VectorTile.LayerNames()
        VB: VectorTile.LayerNames()
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTile.LayerNames()
        VB: Mapbox.VectorTile.VectorTile.LayerNames()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: LayerNames
        path: ''
        startLine: 6495
      summary: "\nCollection of layers contained in the tile\n"
      example: []
      syntax:
        content:
          CSharp: public ReadOnlyCollection<string> LayerNames()
          VB: Public Function LayerNames As ReadOnlyCollection(Of String)
        return:
          type: ReadOnlyCollection{System.String}
          description: Collection of layer names
      overload: Mapbox.VectorTile.VectorTile.LayerNames*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTile.GetLayer(System.String)
      commentId: M:Mapbox.VectorTile.VectorTile.GetLayer(System.String)
      language: CSharp
      name:
        CSharp: GetLayer(String)
        VB: GetLayer(String)
      nameWithType:
        CSharp: VectorTile.GetLayer(String)
        VB: VectorTile.GetLayer(String)
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTile.GetLayer(System.String)
        VB: Mapbox.VectorTile.VectorTile.GetLayer(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetLayer
        path: ''
        startLine: 6506
      summary: "\nGet a tile layer by name\n"
      example: []
      syntax:
        content:
          CSharp: public VectorTileLayer GetLayer(string layerName)
          VB: Public Function GetLayer(layerName As String) As VectorTileLayer
        parameters:
        - id: layerName
          type: System.String
          description: Name of the layer to request
        return:
          type: Mapbox.VectorTile.VectorTileLayer
          description: Decoded <xref href="Mapbox.VectorTile.VectorTileLayer" data-throw-if-not-resolved="false"></xref>
      overload: Mapbox.VectorTile.VectorTile.GetLayer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Mapbox.VectorTile.VectorTileLayer: 
  - id: Mapbox.VectorTile.VectorTileFeature
    commentId: T:Mapbox.VectorTile.VectorTileFeature
    language: CSharp
    name:
      CSharp: VectorTileFeature
      VB: VectorTileFeature
    nameWithType:
      CSharp: VectorTileFeature
      VB: VectorTileFeature
    qualifiedName:
      CSharp: Mapbox.VectorTile.VectorTileFeature
      VB: Mapbox.VectorTile.VectorTileFeature
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile
    source:
      id: VectorTileFeature
      path: ''
      startLine: 6525
    syntax:
      content:
        CSharp: public class VectorTileFeature
        VB: Public Class VectorTileFeature
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Mapbox.VectorTile.VectorTileFeature.#ctor(Mapbox.VectorTile.VectorTileLayer,System.Nullable{System.UInt32},System.Single)
      commentId: M:Mapbox.VectorTile.VectorTileFeature.#ctor(Mapbox.VectorTile.VectorTileLayer,System.Nullable{System.UInt32},System.Single)
      language: CSharp
      name:
        CSharp: VectorTileFeature(VectorTileLayer, Nullable<UInt32>, Single)
        VB: VectorTileFeature(VectorTileLayer, Nullable(Of UInt32), Single)
      nameWithType:
        CSharp: VectorTileFeature.VectorTileFeature(VectorTileLayer, Nullable<UInt32>, Single)
        VB: VectorTileFeature.VectorTileFeature(VectorTileLayer, Nullable(Of UInt32), Single)
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.VectorTileFeature(Mapbox.VectorTile.VectorTileLayer, System.Nullable<System.UInt32>, System.Single)
        VB: Mapbox.VectorTile.VectorTileFeature.VectorTileFeature(Mapbox.VectorTile.VectorTileLayer, System.Nullable(Of System.UInt32), System.Single)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: .ctor
        path: ''
        startLine: 6533
      summary: "\nInitialize VectorTileFeature\n"
      example: []
      syntax:
        content:
          CSharp: public VectorTileFeature(VectorTileLayer layer, uint ? clipBuffer = null, float scale = 1F)
          VB: Public Sub New(layer As VectorTileLayer, clipBuffer As UInteger? = Nothing, scale As Single = 1F)
        parameters:
        - id: layer
          type: Mapbox.VectorTile.VectorTileLayer
          description: Parent <xref href="Mapbox.VectorTile.VectorTileLayer" data-throw-if-not-resolved="false"></xref>
        - id: clipBuffer
          type: System.Nullable{System.UInt32}
        - id: scale
          type: System.Single
      overload: Mapbox.VectorTile.VectorTileFeature.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Mapbox.VectorTile.VectorTileLayer: 
    - id: Mapbox.VectorTile.VectorTileFeature.Id
      commentId: P:Mapbox.VectorTile.VectorTileFeature.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: VectorTileFeature.Id
        VB: VectorTileFeature.Id
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.Id
        VB: Mapbox.VectorTile.VectorTileFeature.Id
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Id
        path: ''
        startLine: 6552
      summary: Id of this feature https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L32
      example: []
      syntax:
        content:
          CSharp: public ulong Id { get; set; }
          VB: Public Property Id As ULong
        parameters: []
        return:
          type: System.UInt64
      overload: Mapbox.VectorTile.VectorTileFeature.Id*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileFeature.Layer
      commentId: P:Mapbox.VectorTile.VectorTileFeature.Layer
      language: CSharp
      name:
        CSharp: Layer
        VB: Layer
      nameWithType:
        CSharp: VectorTileFeature.Layer
        VB: VectorTileFeature.Layer
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.Layer
        VB: Mapbox.VectorTile.VectorTileFeature.Layer
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Layer
        path: ''
        startLine: 6556
      summary: Parent <xref href="Mapbox.VectorTile.VectorTileLayer" data-throw-if-not-resolved="false"></xref> this feature belongs too
      example: []
      syntax:
        content:
          CSharp: public VectorTileLayer Layer { get; }
          VB: Public ReadOnly Property Layer As VectorTileLayer
        parameters: []
        return:
          type: Mapbox.VectorTile.VectorTileLayer
      overload: Mapbox.VectorTile.VectorTileFeature.Layer*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
      references:
        Mapbox.VectorTile.VectorTileLayer: 
    - id: Mapbox.VectorTile.VectorTileFeature.GeometryType
      commentId: P:Mapbox.VectorTile.VectorTileFeature.GeometryType
      language: CSharp
      name:
        CSharp: GeometryType
        VB: GeometryType
      nameWithType:
        CSharp: VectorTileFeature.GeometryType
        VB: VectorTileFeature.GeometryType
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.GeometryType
        VB: Mapbox.VectorTile.VectorTileFeature.GeometryType
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GeometryType
        path: ''
        startLine: 6560
      summary: <xref href="Mapbox.VectorTile.Geometry.GeomType" data-throw-if-not-resolved="false"></xref> of this feature
      example: []
      syntax:
        content:
          CSharp: public GeomType GeometryType { get; set; }
          VB: Public Property GeometryType As GeomType
        parameters: []
        return:
          type: Mapbox.VectorTile.Geometry.GeomType
      overload: Mapbox.VectorTile.VectorTileFeature.GeometryType*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
      references:
        Mapbox.VectorTile.Geometry.GeomType: 
    - id: Mapbox.VectorTile.VectorTileFeature.GeometryCommands
      commentId: P:Mapbox.VectorTile.VectorTileFeature.GeometryCommands
      language: CSharp
      name:
        CSharp: GeometryCommands
        VB: GeometryCommands
      nameWithType:
        CSharp: VectorTileFeature.GeometryCommands
        VB: VectorTileFeature.GeometryCommands
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.GeometryCommands
        VB: Mapbox.VectorTile.VectorTileFeature.GeometryCommands
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GeometryCommands
        path: ''
        startLine: 6564
      summary: Geometry in internal tile coordinates
      example: []
      syntax:
        content:
          CSharp: public List<uint> GeometryCommands { get; set; }
          VB: Public Property GeometryCommands As List(Of UInteger)
        parameters: []
        return:
          type: List{System.UInt32}
      overload: Mapbox.VectorTile.VectorTileFeature.GeometryCommands*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileFeature.Geometry``1(System.Nullable{System.UInt32},System.Nullable{System.Single})
      commentId: M:Mapbox.VectorTile.VectorTileFeature.Geometry``1(System.Nullable{System.UInt32},System.Nullable{System.Single})
      language: CSharp
      name:
        CSharp: Geometry<T>(Nullable<UInt32>, Nullable<Single>)
        VB: Geometry(Of T)(Nullable(Of UInt32), Nullable(Of Single))
      nameWithType:
        CSharp: VectorTileFeature.Geometry<T>(Nullable<UInt32>, Nullable<Single>)
        VB: VectorTileFeature.Geometry(Of T)(Nullable(Of UInt32), Nullable(Of Single))
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.Geometry<T>(System.Nullable<System.UInt32>, System.Nullable<System.Single>)
        VB: Mapbox.VectorTile.VectorTileFeature.Geometry(Of T)(System.Nullable(Of System.UInt32), System.Nullable(Of System.Single))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Geometry
        path: ''
        startLine: 6567
      syntax:
        content:
          CSharp: public List<List<Point2d<T>>> Geometry<T>(uint ? clipBuffer = null, float ? scale = null)
          VB: Public Function Geometry(Of T)(clipBuffer As UInteger? = Nothing, scale As Single? = Nothing) As List(Of List(Of Point2d(Of T)))
        parameters:
        - id: clipBuffer
          type: System.Nullable{System.UInt32}
        - id: scale
          type: System.Nullable{System.Single}
        typeParameters:
        - id: T
        return:
          type: List{List{Mapbox.VectorTile.Geometry.Point2d{{T}}}}
      overload: Mapbox.VectorTile.VectorTileFeature.Geometry*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileFeature.Tags
      commentId: P:Mapbox.VectorTile.VectorTileFeature.Tags
      language: CSharp
      name:
        CSharp: Tags
        VB: Tags
      nameWithType:
        CSharp: VectorTileFeature.Tags
        VB: VectorTileFeature.Tags
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.Tags
        VB: Mapbox.VectorTile.VectorTileFeature.Tags
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Tags
        path: ''
        startLine: 6654
      summary: Tags to resolve properties https://github.com/mapbox/vector-tile-spec/tree/master/2.1#44-feature-attributes
      example: []
      syntax:
        content:
          CSharp: public List<int> Tags { get; set; }
          VB: Public Property Tags As List(Of Integer)
        parameters: []
        return:
          type: List{System.Int32}
      overload: Mapbox.VectorTile.VectorTileFeature.Tags*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileFeature.GetProperties
      commentId: M:Mapbox.VectorTile.VectorTileFeature.GetProperties
      language: CSharp
      name:
        CSharp: GetProperties()
        VB: GetProperties()
      nameWithType:
        CSharp: VectorTileFeature.GetProperties()
        VB: VectorTileFeature.GetProperties()
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.GetProperties()
        VB: Mapbox.VectorTile.VectorTileFeature.GetProperties()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetProperties
        path: ''
        startLine: 6661
      summary: "\nGet properties of this feature. Throws exception if there is an uneven number of feature tag ids\n"
      example: []
      syntax:
        content:
          CSharp: public Dictionary<string, object> GetProperties()
          VB: Public Function GetProperties As Dictionary(Of String, Object)
        return:
          type: Dictionary{System.String,System.Object}
          description: Dictionary of this feature's properties
      overload: Mapbox.VectorTile.VectorTileFeature.GetProperties*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileFeature.GetValue(System.String)
      commentId: M:Mapbox.VectorTile.VectorTileFeature.GetValue(System.String)
      language: CSharp
      name:
        CSharp: GetValue(String)
        VB: GetValue(String)
      nameWithType:
        CSharp: VectorTileFeature.GetValue(String)
        VB: VectorTileFeature.GetValue(String)
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileFeature.GetValue(System.String)
        VB: Mapbox.VectorTile.VectorTileFeature.GetValue(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetValue
        path: ''
        startLine: 6682
      summary: "\nGet property by name\n"
      example: []
      syntax:
        content:
          CSharp: public object GetValue(string key)
          VB: Public Function GetValue(key As String) As Object
        parameters:
        - id: key
          type: System.String
          description: Name of the property to request
        return:
          type: System.Object
          description: Value of the requested property
      overload: Mapbox.VectorTile.VectorTileFeature.GetValue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Mapbox.VectorTile.VectorTileLayer
    commentId: T:Mapbox.VectorTile.VectorTileLayer
    language: CSharp
    name:
      CSharp: VectorTileLayer
      VB: VectorTileLayer
    nameWithType:
      CSharp: VectorTileLayer
      VB: VectorTileLayer
    qualifiedName:
      CSharp: Mapbox.VectorTile.VectorTileLayer
      VB: Mapbox.VectorTile.VectorTileLayer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile
    source:
      id: VectorTileLayer
      path: ''
      startLine: 6717
    summary: "\nClass to access a vector tile layer\n"
    example: []
    syntax:
      content:
        CSharp: public class VectorTileLayer
        VB: Public Class VectorTileLayer
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Mapbox.VectorTile.VectorTileLayer.#ctor
      commentId: M:Mapbox.VectorTile.VectorTileLayer.#ctor
      language: CSharp
      name:
        CSharp: VectorTileLayer()
        VB: VectorTileLayer()
      nameWithType:
        CSharp: VectorTileLayer.VectorTileLayer()
        VB: VectorTileLayer.VectorTileLayer()
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.VectorTileLayer()
        VB: Mapbox.VectorTile.VectorTileLayer.VectorTileLayer()
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: .ctor
        path: ''
        startLine: 6725
      summary: "\nClass to access a vector tile layer\n"
      example: []
      syntax:
        content:
          CSharp: public VectorTileLayer()
          VB: Public Sub New
      overload: Mapbox.VectorTile.VectorTileLayer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.#ctor(System.Byte[])
      commentId: M:Mapbox.VectorTile.VectorTileLayer.#ctor(System.Byte[])
      language: CSharp
      name:
        CSharp: VectorTileLayer(Byte[])
        VB: VectorTileLayer(Byte())
      nameWithType:
        CSharp: VectorTileLayer.VectorTileLayer(Byte[])
        VB: VectorTileLayer.VectorTileLayer(Byte())
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.VectorTileLayer(System.Byte[])
        VB: Mapbox.VectorTile.VectorTileLayer.VectorTileLayer(System.Byte())
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: .ctor
        path: ''
        startLine: 6737
      summary: "\nInitialize vector tile layer with data\n"
      example: []
      syntax:
        content:
          CSharp: public VectorTileLayer(byte[] data)
          VB: Public Sub New(data As Byte())
        parameters:
        - id: data
          type: System.Byte[]
          description: Raw layer data as byte array
      overload: Mapbox.VectorTile.VectorTileLayer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.Data
      commentId: P:Mapbox.VectorTile.VectorTileLayer.Data
      language: CSharp
      name:
        CSharp: Data
        VB: Data
      nameWithType:
        CSharp: VectorTileLayer.Data
        VB: VectorTileLayer.Data
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.Data
        VB: Mapbox.VectorTile.VectorTileLayer.Data
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Data
        path: ''
        startLine: 6744
      summary: Raw byte array data
      example: []
      syntax:
        content:
          CSharp: public byte[] Data { get; }
          VB: Public ReadOnly Property Data As Byte()
        parameters: []
        return:
          type: System.Byte[]
      overload: Mapbox.VectorTile.VectorTileLayer.Data*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Mapbox.VectorTile.VectorTileLayer.FeatureCount
      commentId: M:Mapbox.VectorTile.VectorTileLayer.FeatureCount
      language: CSharp
      name:
        CSharp: FeatureCount()
        VB: FeatureCount()
      nameWithType:
        CSharp: VectorTileLayer.FeatureCount()
        VB: VectorTileLayer.FeatureCount()
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.FeatureCount()
        VB: Mapbox.VectorTile.VectorTileLayer.FeatureCount()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: FeatureCount
        path: ''
        startLine: 6751
      summary: "\nGet number of features.\n"
      example: []
      syntax:
        content:
          CSharp: public int FeatureCount()
          VB: Public Function FeatureCount As Integer
        return:
          type: System.Int32
          description: Number of features in this layer
      overload: Mapbox.VectorTile.VectorTileLayer.FeatureCount*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.GetFeature(System.Int32,System.Nullable{System.UInt32},System.Single)
      commentId: M:Mapbox.VectorTile.VectorTileLayer.GetFeature(System.Int32,System.Nullable{System.UInt32},System.Single)
      language: CSharp
      name:
        CSharp: GetFeature(Int32, Nullable<UInt32>, Single)
        VB: GetFeature(Int32, Nullable(Of UInt32), Single)
      nameWithType:
        CSharp: VectorTileLayer.GetFeature(Int32, Nullable<UInt32>, Single)
        VB: VectorTileLayer.GetFeature(Int32, Nullable(Of UInt32), Single)
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.GetFeature(System.Int32, System.Nullable<System.UInt32>, System.Single)
        VB: Mapbox.VectorTile.VectorTileLayer.GetFeature(System.Int32, System.Nullable(Of System.UInt32), System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetFeature
        path: ''
        startLine: 6767
      summary: "\nGet a feature of this layer\n"
      example: []
      syntax:
        content:
          CSharp: public VectorTileFeature GetFeature(int feature, uint ? clipBuffer = null, float scale = 1F)
          VB: Public Function GetFeature(feature As Integer, clipBuffer As UInteger? = Nothing, scale As Single = 1F) As VectorTileFeature
        parameters:
        - id: feature
          type: System.Int32
          description: Index of the feature to request
        - id: clipBuffer
          type: System.Nullable{System.UInt32}
          description: "\n<p>'null': returns the geometries unaltered as they are in the vector tile. </p>\n<p>Any value &gt;=0 clips a border with the size around the tile. </p>\n<p>These are not pixels but the same units as the 'extent' of the layer. </p>\n"
        - id: scale
          type: System.Single
        return:
          type: Mapbox.VectorTile.VectorTileFeature
          description: ''
      overload: Mapbox.VectorTile.VectorTileLayer.GetFeature*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.AddFeatureData(System.Byte[])
      commentId: M:Mapbox.VectorTile.VectorTileLayer.AddFeatureData(System.Byte[])
      language: CSharp
      name:
        CSharp: AddFeatureData(Byte[])
        VB: AddFeatureData(Byte())
      nameWithType:
        CSharp: VectorTileLayer.AddFeatureData(Byte[])
        VB: VectorTileLayer.AddFeatureData(Byte())
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.AddFeatureData(System.Byte[])
        VB: Mapbox.VectorTile.VectorTileLayer.AddFeatureData(System.Byte())
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: AddFeatureData
        path: ''
        startLine: 6773
      syntax:
        content:
          CSharp: public void AddFeatureData(byte[] data)
          VB: Public Sub AddFeatureData(data As Byte())
        parameters:
        - id: data
          type: System.Byte[]
      overload: Mapbox.VectorTile.VectorTileLayer.AddFeatureData*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.Name
      commentId: P:Mapbox.VectorTile.VectorTileLayer.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: VectorTileLayer.Name
        VB: VectorTileLayer.Name
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.Name
        VB: Mapbox.VectorTile.VectorTileLayer.Name
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Name
        path: ''
        startLine: 6780
      summary: Name of this layer https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L57
      example: []
      syntax:
        content:
          CSharp: public string Name { get; set; }
          VB: Public Property Name As String
        parameters: []
        return:
          type: System.String
      overload: Mapbox.VectorTile.VectorTileLayer.Name*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.Version
      commentId: P:Mapbox.VectorTile.VectorTileLayer.Version
      language: CSharp
      name:
        CSharp: Version
        VB: Version
      nameWithType:
        CSharp: VectorTileLayer.Version
        VB: VectorTileLayer.Version
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.Version
        VB: Mapbox.VectorTile.VectorTileLayer.Version
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Version
        path: ''
        startLine: 6784
      summary: Version of this layer https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L55
      example: []
      syntax:
        content:
          CSharp: public ulong Version { get; set; }
          VB: Public Property Version As ULong
        parameters: []
        return:
          type: System.UInt64
      overload: Mapbox.VectorTile.VectorTileLayer.Version*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.Extent
      commentId: P:Mapbox.VectorTile.VectorTileLayer.Extent
      language: CSharp
      name:
        CSharp: Extent
        VB: Extent
      nameWithType:
        CSharp: VectorTileLayer.Extent
        VB: VectorTileLayer.Extent
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.Extent
        VB: Mapbox.VectorTile.VectorTileLayer.Extent
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Extent
        path: ''
        startLine: 6788
      summary: Extent of this layer https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L70
      example: []
      syntax:
        content:
          CSharp: public ulong Extent { get; set; }
          VB: Public Property Extent As ULong
        parameters: []
        return:
          type: System.UInt64
      overload: Mapbox.VectorTile.VectorTileLayer.Extent*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.Values
      commentId: P:Mapbox.VectorTile.VectorTileLayer.Values
      language: CSharp
      name:
        CSharp: Values
        VB: Values
      nameWithType:
        CSharp: VectorTileLayer.Values
        VB: VectorTileLayer.Values
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.Values
        VB: Mapbox.VectorTile.VectorTileLayer.Values
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Values
        path: ''
        startLine: 6799
      summary: "\nTODO: switch to 'dynamic' when Unity supports .Net 4.5\nValues contained in this layer\n"
      example: []
      syntax:
        content:
          CSharp: public List<object> Values { get; set; }
          VB: Public Property Values As List(Of Object)
        parameters: []
        return:
          type: List{System.Object}
      overload: Mapbox.VectorTile.VectorTileLayer.Values*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileLayer.Keys
      commentId: P:Mapbox.VectorTile.VectorTileLayer.Keys
      language: CSharp
      name:
        CSharp: Keys
        VB: Keys
      nameWithType:
        CSharp: VectorTileLayer.Keys
        VB: VectorTileLayer.Keys
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileLayer.Keys
        VB: Mapbox.VectorTile.VectorTileLayer.Keys
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: Keys
        path: ''
        startLine: 6805
      summary: "\nKeys contained in this layer\n"
      example: []
      syntax:
        content:
          CSharp: public List<string> Keys { get; set; }
          VB: Public Property Keys As List(Of String)
        parameters: []
        return:
          type: List{System.String}
      overload: Mapbox.VectorTile.VectorTileLayer.Keys*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Mapbox.VectorTile.VectorTileReader
    commentId: T:Mapbox.VectorTile.VectorTileReader
    language: CSharp
    name:
      CSharp: VectorTileReader
      VB: VectorTileReader
    nameWithType:
      CSharp: VectorTileReader
      VB: VectorTileReader
    qualifiedName:
      CSharp: Mapbox.VectorTile.VectorTileReader
      VB: Mapbox.VectorTile.VectorTileReader
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile
    source:
      id: VectorTileReader
      path: ''
      startLine: 6831
    summary: "\nMail vector tile reader class\n"
    example: []
    syntax:
      content:
        CSharp: public class VectorTileReader
        VB: Public Class VectorTileReader
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Mapbox.VectorTile.VectorTileReader.#ctor(System.Byte[],System.Boolean)
      commentId: M:Mapbox.VectorTile.VectorTileReader.#ctor(System.Byte[],System.Boolean)
      language: CSharp
      name:
        CSharp: VectorTileReader(Byte[], Boolean)
        VB: VectorTileReader(Byte(), Boolean)
      nameWithType:
        CSharp: VectorTileReader.VectorTileReader(Byte[], Boolean)
        VB: VectorTileReader.VectorTileReader(Byte(), Boolean)
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileReader.VectorTileReader(System.Byte[], System.Boolean)
        VB: Mapbox.VectorTile.VectorTileReader.VectorTileReader(System.Byte(), System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: .ctor
        path: ''
        startLine: 6839
      summary: "\nInitialize VectorTileReader\n"
      example: []
      syntax:
        content:
          CSharp: public VectorTileReader(byte[] data, bool validate = true)
          VB: Public Sub New(data As Byte(), validate As Boolean = True)
        parameters:
        - id: data
          type: System.Byte[]
          description: Byte array containing the raw (already unzipped) tile data
        - id: validate
          type: System.Boolean
          description: If true, run checks if the tile contains valid data. Decreases decoding speed.
      overload: Mapbox.VectorTile.VectorTileReader.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileReader.LayerNames
      commentId: M:Mapbox.VectorTile.VectorTileReader.LayerNames
      language: CSharp
      name:
        CSharp: LayerNames()
        VB: LayerNames()
      nameWithType:
        CSharp: VectorTileReader.LayerNames()
        VB: VectorTileReader.LayerNames()
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileReader.LayerNames()
        VB: Mapbox.VectorTile.VectorTileReader.LayerNames()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: LayerNames
        path: ''
        startLine: 6917
      summary: "\nCollection of layers contained in the tile\n"
      example: []
      syntax:
        content:
          CSharp: public ReadOnlyCollection<string> LayerNames()
          VB: Public Function LayerNames As ReadOnlyCollection(Of String)
        return:
          type: ReadOnlyCollection{System.String}
          description: Collection of layer names
      overload: Mapbox.VectorTile.VectorTileReader.LayerNames*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.VectorTileReader.GetLayer(System.String)
      commentId: M:Mapbox.VectorTile.VectorTileReader.GetLayer(System.String)
      language: CSharp
      name:
        CSharp: GetLayer(String)
        VB: GetLayer(String)
      nameWithType:
        CSharp: VectorTileReader.GetLayer(String)
        VB: VectorTileReader.GetLayer(String)
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileReader.GetLayer(System.String)
        VB: Mapbox.VectorTile.VectorTileReader.GetLayer(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetLayer
        path: ''
        startLine: 6933
      summary: "\nGet a tile layer by name\n"
      example: []
      syntax:
        content:
          CSharp: public VectorTileLayer GetLayer(string name)
          VB: Public Function GetLayer(name As String) As VectorTileLayer
        parameters:
        - id: name
          type: System.String
        return:
          type: Mapbox.VectorTile.VectorTileLayer
          description: Decoded <xref href="Mapbox.VectorTile.VectorTileLayer" data-throw-if-not-resolved="false"></xref>
      overload: Mapbox.VectorTile.VectorTileReader.GetLayer*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        Mapbox.VectorTile.VectorTileLayer: 
    - id: Mapbox.VectorTile.VectorTileReader.GetFeature(Mapbox.VectorTile.VectorTileLayer,System.Byte[],System.Boolean,System.Nullable{System.UInt32},System.Single)
      commentId: M:Mapbox.VectorTile.VectorTileReader.GetFeature(Mapbox.VectorTile.VectorTileLayer,System.Byte[],System.Boolean,System.Nullable{System.UInt32},System.Single)
      language: CSharp
      name:
        CSharp: GetFeature(VectorTileLayer, Byte[], Boolean, Nullable<UInt32>, Single)
        VB: GetFeature(VectorTileLayer, Byte(), Boolean, Nullable(Of UInt32), Single)
      nameWithType:
        CSharp: VectorTileReader.GetFeature(VectorTileLayer, Byte[], Boolean, Nullable<UInt32>, Single)
        VB: VectorTileReader.GetFeature(VectorTileLayer, Byte(), Boolean, Nullable(Of UInt32), Single)
      qualifiedName:
        CSharp: Mapbox.VectorTile.VectorTileReader.GetFeature(Mapbox.VectorTile.VectorTileLayer, System.Byte[], System.Boolean, System.Nullable<System.UInt32>, System.Single)
        VB: Mapbox.VectorTile.VectorTileReader.GetFeature(Mapbox.VectorTile.VectorTileLayer, System.Byte(), System.Boolean, System.Nullable(Of System.UInt32), System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile
      source:
        id: GetFeature
        path: ''
        startLine: 7080
      summary: "\nGet a feature of the <xref href=\"Mapbox.VectorTile.VectorTileLayer\" data-throw-if-not-resolved=\"false\"></xref>\n"
      example: []
      syntax:
        content:
          CSharp: public static VectorTileFeature GetFeature(VectorTileLayer layer, byte[] data, bool validate = true, uint ? clipBuffer = null, float scale = 1F)
          VB: Public Shared Function GetFeature(layer As VectorTileLayer, data As Byte(), validate As Boolean = True, clipBuffer As UInteger? = Nothing, scale As Single = 1F) As VectorTileFeature
        parameters:
        - id: layer
          type: Mapbox.VectorTile.VectorTileLayer
          description: <xref href="Mapbox.VectorTile.VectorTileLayer" data-throw-if-not-resolved="false"></xref> containing the feature
        - id: data
          type: System.Byte[]
          description: Raw byte data of the feature
        - id: validate
          type: System.Boolean
          description: If true, run checks if the tile contains valid data. Decreases decoding speed.
        - id: clipBuffer
          type: System.Nullable{System.UInt32}
        - id: scale
          type: System.Single
        return:
          type: Mapbox.VectorTile.VectorTileFeature
          description: ''
      overload: Mapbox.VectorTile.VectorTileReader.GetFeature*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        Mapbox.VectorTile.VectorTileLayer: 
- id: Mapbox.VectorTile.ExtensionMethods
  commentId: N:Mapbox.VectorTile.ExtensionMethods
  language: CSharp
  name:
    CSharp: Mapbox.VectorTile.ExtensionMethods
    VB: Mapbox.VectorTile.ExtensionMethods
  nameWithType:
    CSharp: Mapbox.VectorTile.ExtensionMethods
    VB: Mapbox.VectorTile.ExtensionMethods
  qualifiedName:
    CSharp: Mapbox.VectorTile.ExtensionMethods
    VB: Mapbox.VectorTile.ExtensionMethods
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Mapbox.VectorTile.ExtensionMethods.EnumExtensions
    commentId: T:Mapbox.VectorTile.ExtensionMethods.EnumExtensions
    language: CSharp
    name:
      CSharp: EnumExtensions
      VB: EnumExtensions
    nameWithType:
      CSharp: EnumExtensions
      VB: EnumExtensions
    qualifiedName:
      CSharp: Mapbox.VectorTile.ExtensionMethods.EnumExtensions
      VB: Mapbox.VectorTile.ExtensionMethods.EnumExtensions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.ExtensionMethods
    source:
      id: EnumExtensions
      path: ''
      startLine: 27
    summary: "\nExtension method to extract the [Description] attribute from an Enum\n"
    example: []
    syntax:
      content:
        CSharp: public static class EnumExtensions
        VB: Public Module EnumExtensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description(System.Enum)
      commentId: M:Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description(System.Enum)
      language: CSharp
      name:
        CSharp: Description(Enum)
        VB: Description(Enum)
      nameWithType:
        CSharp: EnumExtensions.Description(Enum)
        VB: EnumExtensions.Description(Enum)
      qualifiedName:
        CSharp: Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description(System.Enum)
        VB: Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description(System.Enum)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.ExtensionMethods
      source:
        id: Description
        path: ''
        startLine: 29
      syntax:
        content:
          CSharp: public static string Description(this Enum value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Description(value As  Enum) As String
        parameters:
        - id: value
          type: System.Enum
        return:
          type: System.String
      overload: Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
    commentId: T:Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
    language: CSharp
    name:
      CSharp: VectorTileExtensions
      VB: VectorTileExtensions
    nameWithType:
      CSharp: VectorTileExtensions
      VB: VectorTileExtensions
    qualifiedName:
      CSharp: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
      VB: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.ExtensionMethods
    source:
      id: VectorTileExtensions
      path: ''
      startLine: 59
    syntax:
      content:
        CSharp: public static class VectorTileExtensions
        VB: Public Module VectorTileExtensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson(Mapbox.VectorTile.VectorTile,System.UInt64,System.UInt64,System.UInt64,System.Nullable{System.UInt32})
      commentId: M:Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson(Mapbox.VectorTile.VectorTile,System.UInt64,System.UInt64,System.UInt64,System.Nullable{System.UInt32})
      language: CSharp
      name:
        CSharp: ToGeoJson(VectorTile, UInt64, UInt64, UInt64, Nullable<UInt32>)
        VB: ToGeoJson(VectorTile, UInt64, UInt64, UInt64, Nullable(Of UInt32))
      nameWithType:
        CSharp: VectorTileExtensions.ToGeoJson(VectorTile, UInt64, UInt64, UInt64, Nullable<UInt32>)
        VB: VectorTileExtensions.ToGeoJson(VectorTile, UInt64, UInt64, UInt64, Nullable(Of UInt32))
      qualifiedName:
        CSharp: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson(Mapbox.VectorTile.VectorTile, System.UInt64, System.UInt64, System.UInt64, System.Nullable<System.UInt32>)
        VB: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson(Mapbox.VectorTile.VectorTile, System.UInt64, System.UInt64, System.UInt64, System.Nullable(Of System.UInt32))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.ExtensionMethods
      source:
        id: ToGeoJson
        path: ''
        startLine: 77
      summary: "\nReturn the whole vector tile as GeoJSON\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToGeoJson(this VectorTile tile, ulong zoom, ulong tileColumn, ulong tileRow, uint ? clipBuffer = null)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToGeoJson(tile As VectorTile, zoom As ULong, tileColumn As ULong, tileRow As ULong, clipBuffer As UInteger? = Nothing) As String
        parameters:
        - id: tile
          type: Mapbox.VectorTile.VectorTile
          description: ''
        - id: zoom
          type: System.UInt64
          description: Zoom level of the tile
        - id: tileColumn
          type: System.UInt64
          description: Column of the tile (OSM tile schema)
        - id: tileRow
          type: System.UInt64
          description: Row of the tile (OSM tile schema)
        - id: clipBuffer
          type: System.Nullable{System.UInt32}
          description: "\n<p>Vector tiles may contain data reaching beyond the actual tile border.</p>\n<p>Define if/how this data should be included.</p>\n<p>'null': data from the vector tile as is</p>\n<p>'&gt;=0': clip distance in internal tile units</p>\n"
        return:
          type: System.String
          description: GeoJSON of the vector tile contents
      overload: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
    commentId: T:Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
    language: CSharp
    name:
      CSharp: VectorTileFeatureExtensions
      VB: VectorTileFeatureExtensions
    nameWithType:
      CSharp: VectorTileFeatureExtensions
      VB: VectorTileFeatureExtensions
    qualifiedName:
      CSharp: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
      VB: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.ExtensionMethods
    source:
      id: VectorTileFeatureExtensions
      path: ''
      startLine: 272
    syntax:
      content:
        CSharp: public static class VectorTileFeatureExtensions
        VB: Public Module VectorTileFeatureExtensions
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84(Mapbox.VectorTile.VectorTileFeature,System.UInt64,System.UInt64,System.UInt64,System.Nullable{System.UInt32})
      commentId: M:Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84(Mapbox.VectorTile.VectorTileFeature,System.UInt64,System.UInt64,System.UInt64,System.Nullable{System.UInt32})
      language: CSharp
      name:
        CSharp: GeometryAsWgs84(VectorTileFeature, UInt64, UInt64, UInt64, Nullable<UInt32>)
        VB: GeometryAsWgs84(VectorTileFeature, UInt64, UInt64, UInt64, Nullable(Of UInt32))
      nameWithType:
        CSharp: VectorTileFeatureExtensions.GeometryAsWgs84(VectorTileFeature, UInt64, UInt64, UInt64, Nullable<UInt32>)
        VB: VectorTileFeatureExtensions.GeometryAsWgs84(VectorTileFeature, UInt64, UInt64, UInt64, Nullable(Of UInt32))
      qualifiedName:
        CSharp: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84(Mapbox.VectorTile.VectorTileFeature, System.UInt64, System.UInt64, System.UInt64, System.Nullable<System.UInt32>)
        VB: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84(Mapbox.VectorTile.VectorTileFeature, System.UInt64, System.UInt64, System.UInt64, System.Nullable(Of System.UInt32))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.ExtensionMethods
      source:
        id: GeometryAsWgs84
        path: ''
        startLine: 284
      summary: "\n&gt;Geometry in LatLng coordinates instead of internal tile coordinates\n"
      example: []
      syntax:
        content:
          CSharp: public static List<List<LatLng>> GeometryAsWgs84(this VectorTileFeature feature, ulong zoom, ulong tileColumn, ulong tileRow, uint ? clipBuffer = null)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GeometryAsWgs84(feature As VectorTileFeature, zoom As ULong, tileColumn As ULong, tileRow As ULong, clipBuffer As UInteger? = Nothing) As List(Of List(Of LatLng))
        parameters:
        - id: feature
          type: Mapbox.VectorTile.VectorTileFeature
          description: ''
        - id: zoom
          type: System.UInt64
          description: Zoom level of the tile
        - id: tileColumn
          type: System.UInt64
          description: Column of the tile (OSM tile schema)
        - id: tileRow
          type: System.UInt64
          description: Row of the tile (OSM tile schema)
        - id: clipBuffer
          type: System.Nullable{System.UInt32}
        return:
          type: List{List{Mapbox.VectorTile.Geometry.LatLng}}
          description: ''
      overload: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Mapbox.VectorTile.Geometry
  commentId: N:Mapbox.VectorTile.Geometry
  language: CSharp
  name:
    CSharp: Mapbox.VectorTile.Geometry
    VB: Mapbox.VectorTile.Geometry
  nameWithType:
    CSharp: Mapbox.VectorTile.Geometry
    VB: Mapbox.VectorTile.Geometry
  qualifiedName:
    CSharp: Mapbox.VectorTile.Geometry
    VB: Mapbox.VectorTile.Geometry
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Mapbox.VectorTile.Geometry.DecodeGeometry
    commentId: T:Mapbox.VectorTile.Geometry.DecodeGeometry
    language: CSharp
    name:
      CSharp: DecodeGeometry
      VB: DecodeGeometry
    nameWithType:
      CSharp: DecodeGeometry
      VB: DecodeGeometry
    qualifiedName:
      CSharp: Mapbox.VectorTile.Geometry.DecodeGeometry
      VB: Mapbox.VectorTile.Geometry.DecodeGeometry
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Geometry
    source:
      id: DecodeGeometry
      path: ''
      startLine: 329
    summary: "\nDecode tile geometries\n"
    example: []
    syntax:
      content:
        CSharp: public static class DecodeGeometry
        VB: Public Module DecodeGeometry
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry(System.UInt64,Mapbox.VectorTile.Geometry.GeomType,List{System.UInt32},System.Single)
      commentId: M:Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry(System.UInt64,Mapbox.VectorTile.Geometry.GeomType,List{System.UInt32},System.Single)
      language: CSharp
      name:
        CSharp: GetGeometry(UInt64, GeomType, List<UInt32>, Single)
        VB: GetGeometry(UInt64, GeomType, List(Of UInt32), Single)
      nameWithType:
        CSharp: DecodeGeometry.GetGeometry(UInt64, GeomType, List<UInt32>, Single)
        VB: DecodeGeometry.GetGeometry(UInt64, GeomType, List(Of UInt32), Single)
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry(System.UInt64, Mapbox.VectorTile.Geometry.GeomType, List<System.UInt32>, System.Single)
        VB: Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry(System.UInt64, Mapbox.VectorTile.Geometry.GeomType, List(Of System.UInt32), System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: GetGeometry
        path: ''
        startLine: 348
      syntax:
        content:
          CSharp: public static List<List<Point2d<long>>> GetGeometry(ulong extent, GeomType geomType, List<uint> geometryCommands, float scale = 1F)
          VB: Public Shared Function GetGeometry(extent As ULong, geomType As GeomType, geometryCommands As List(Of UInteger), scale As Single = 1F) As List(Of List(Of Point2d(Of Long)))
        parameters:
        - id: extent
          type: System.UInt64
        - id: geomType
          type: Mapbox.VectorTile.Geometry.GeomType
        - id: geometryCommands
          type: List{System.UInt32}
        - id: scale
          type: System.Single
        return:
          type: List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}}
      overload: Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Mapbox.VectorTile.Geometry.DecodeGeometry.Scale``1(List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}},System.Single)
      commentId: M:Mapbox.VectorTile.Geometry.DecodeGeometry.Scale``1(List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}},System.Single)
      language: CSharp
      name:
        CSharp: Scale<T>(List<List<Point2d<Int64>>>, Single)
        VB: Scale(Of T)(List(Of List(Of Point2d(Of Int64))), Single)
      nameWithType:
        CSharp: DecodeGeometry.Scale<T>(List<List<Point2d<Int64>>>, Single)
        VB: DecodeGeometry.Scale(Of T)(List(Of List(Of Point2d(Of Int64))), Single)
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.DecodeGeometry.Scale<T>(List<List<Mapbox.VectorTile.Geometry.Point2d<System.Int64>>>, System.Single)
        VB: Mapbox.VectorTile.Geometry.DecodeGeometry.Scale(Of T)(List(Of List(Of Mapbox.VectorTile.Geometry.Point2d(Of System.Int64))), System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: Scale
        path: ''
        startLine: 417
      summary: "\n\n"
      example: []
      syntax:
        content:
          CSharp: public static List<List<Point2d<T>>> Scale<T>(List<List<Point2d<long>>> inGeom, float scale = 1F)
          VB: Public Shared Function Scale(Of T)(inGeom As List(Of List(Of Point2d(Of Long))), scale As Single = 1F) As List(Of List(Of Point2d(Of T)))
        parameters:
        - id: inGeom
          type: List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}}
          description: Geometry in internal tile coordinates.
        - id: scale
          type: System.Single
          description: Scale factor.
        typeParameters:
        - id: T
          description: 'Type of <xref href="Mapbox.VectorTile.Geometry.Point2d%601" data-throw-if-not-resolved="false"></xref> to be returned. Currently supported: int, long and float. '
        return:
          type: List{List{Mapbox.VectorTile.Geometry.Point2d{{T}}}}
          description: ''
      overload: Mapbox.VectorTile.Geometry.DecodeGeometry.Scale*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        Mapbox.VectorTile.Geometry.Point2d`1: 
  - id: Mapbox.VectorTile.Geometry.GeomType
    commentId: T:Mapbox.VectorTile.Geometry.GeomType
    language: CSharp
    name:
      CSharp: GeomType
      VB: GeomType
    nameWithType:
      CSharp: GeomType
      VB: GeomType
    qualifiedName:
      CSharp: Mapbox.VectorTile.Geometry.GeomType
      VB: Mapbox.VectorTile.Geometry.GeomType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Geometry
    source:
      id: GeomType
      path: ''
      startLine: 508
    summary: "\nAvailable geometry types\n"
    example: []
    syntax:
      content:
        CSharp: public enum GeomType
        VB: Public Enum GeomType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Mapbox.VectorTile.Geometry.GeomType.UNKNOWN
      commentId: F:Mapbox.VectorTile.Geometry.GeomType.UNKNOWN
      language: CSharp
      name:
        CSharp: UNKNOWN
        VB: UNKNOWN
      nameWithType:
        CSharp: GeomType.UNKNOWN
        VB: GeomType.UNKNOWN
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.GeomType.UNKNOWN
        VB: Mapbox.VectorTile.Geometry.GeomType.UNKNOWN
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: UNKNOWN
        path: ''
        startLine: 510
      syntax:
        content:
          CSharp: UNKNOWN = 0
          VB: UNKNOWN = 0
        return:
          type: Mapbox.VectorTile.Geometry.GeomType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Geometry.GeomType.POINT
      commentId: F:Mapbox.VectorTile.Geometry.GeomType.POINT
      language: CSharp
      name:
        CSharp: POINT
        VB: POINT
      nameWithType:
        CSharp: GeomType.POINT
        VB: GeomType.POINT
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.GeomType.POINT
        VB: Mapbox.VectorTile.Geometry.GeomType.POINT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: POINT
        path: ''
        startLine: 511
      syntax:
        content:
          CSharp: POINT = 1
          VB: POINT = 1
        return:
          type: Mapbox.VectorTile.Geometry.GeomType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Geometry.GeomType.LINESTRING
      commentId: F:Mapbox.VectorTile.Geometry.GeomType.LINESTRING
      language: CSharp
      name:
        CSharp: LINESTRING
        VB: LINESTRING
      nameWithType:
        CSharp: GeomType.LINESTRING
        VB: GeomType.LINESTRING
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.GeomType.LINESTRING
        VB: Mapbox.VectorTile.Geometry.GeomType.LINESTRING
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: LINESTRING
        path: ''
        startLine: 513
      syntax:
        content:
          CSharp: LINESTRING = 2
          VB: LINESTRING = 2
        return:
          type: Mapbox.VectorTile.Geometry.GeomType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Geometry.GeomType.POLYGON
      commentId: F:Mapbox.VectorTile.Geometry.GeomType.POLYGON
      language: CSharp
      name:
        CSharp: POLYGON
        VB: POLYGON
      nameWithType:
        CSharp: GeomType.POLYGON
        VB: GeomType.POLYGON
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.GeomType.POLYGON
        VB: Mapbox.VectorTile.Geometry.GeomType.POLYGON
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: POLYGON
        path: ''
        startLine: 515
      syntax:
        content:
          CSharp: POLYGON = 3
          VB: POLYGON = 3
        return:
          type: Mapbox.VectorTile.Geometry.GeomType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Mapbox.VectorTile.Geometry.LatLng
    commentId: T:Mapbox.VectorTile.Geometry.LatLng
    language: CSharp
    name:
      CSharp: LatLng
      VB: LatLng
    nameWithType:
      CSharp: LatLng
      VB: LatLng
    qualifiedName:
      CSharp: Mapbox.VectorTile.Geometry.LatLng
      VB: Mapbox.VectorTile.Geometry.LatLng
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Geometry
    source:
      id: LatLng
      path: ''
      startLine: 523
    summary: "\nStructure to hold a LatLng coordinate pair\n"
    example: []
    syntax:
      content:
        CSharp: public struct LatLng
        VB: Public Structure LatLng
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Mapbox.VectorTile.Geometry.LatLng.Lat
      commentId: P:Mapbox.VectorTile.Geometry.LatLng.Lat
      language: CSharp
      name:
        CSharp: Lat
        VB: Lat
      nameWithType:
        CSharp: LatLng.Lat
        VB: LatLng.Lat
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.LatLng.Lat
        VB: Mapbox.VectorTile.Geometry.LatLng.Lat
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: Lat
        path: ''
        startLine: 525
      syntax:
        content:
          CSharp: public double Lat { get; set; }
          VB: Public Property Lat As Double
        parameters: []
        return:
          type: System.Double
      overload: Mapbox.VectorTile.Geometry.LatLng.Lat*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.Geometry.LatLng.Lng
      commentId: P:Mapbox.VectorTile.Geometry.LatLng.Lng
      language: CSharp
      name:
        CSharp: Lng
        VB: Lng
      nameWithType:
        CSharp: LatLng.Lng
        VB: LatLng.Lng
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.LatLng.Lng
        VB: Mapbox.VectorTile.Geometry.LatLng.Lng
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: Lng
        path: ''
        startLine: 526
      syntax:
        content:
          CSharp: public double Lng { get; set; }
          VB: Public Property Lng As Double
        parameters: []
        return:
          type: System.Double
      overload: Mapbox.VectorTile.Geometry.LatLng.Lng*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Mapbox.VectorTile.Geometry.LatLng.ToString
      commentId: M:Mapbox.VectorTile.Geometry.LatLng.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: LatLng.ToString()
        VB: LatLng.ToString()
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.LatLng.ToString()
        VB: Mapbox.VectorTile.Geometry.LatLng.ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: ToString
        path: ''
        startLine: 528
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Mapbox.VectorTile.Geometry.LatLng.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Mapbox.VectorTile.Geometry.Point2d`1
    commentId: T:Mapbox.VectorTile.Geometry.Point2d`1
    language: CSharp
    name:
      CSharp: Point2d<T>
      VB: Point2d(Of T)
    nameWithType:
      CSharp: Point2d<T>
      VB: Point2d(Of T)
    qualifiedName:
      CSharp: Mapbox.VectorTile.Geometry.Point2d<T>
      VB: Mapbox.VectorTile.Geometry.Point2d(Of T)
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Geometry
    source:
      id: Point2d
      path: ''
      startLine: 542
    summary: "\nStructure to hold a 2D point coordinate pair\n"
    example: []
    syntax:
      content:
        CSharp: public struct Point2d<T>
        VB: Public Structure Point2d(Of T)
      typeParameters:
      - id: T
    inheritedMembers:
    - System.ValueType.Equals(System.Object)
    - System.ValueType.GetHashCode
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Mapbox.VectorTile.Geometry.Point2d`1.#ctor(`0,`0)
      commentId: M:Mapbox.VectorTile.Geometry.Point2d`1.#ctor(`0,`0)
      language: CSharp
      name:
        CSharp: Point2d(T, T)
        VB: Point2d(T, T)
      nameWithType:
        CSharp: Point2d<T>.Point2d(T, T)
        VB: Point2d(Of T).Point2d(T, T)
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.Point2d<T>.Point2d(T, T)
        VB: Mapbox.VectorTile.Geometry.Point2d(Of T).Point2d(T, T)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: .ctor
        path: ''
        startLine: 545
      syntax:
        content:
          CSharp: public Point2d(T x, T y)
          VB: Public Sub New(x As T, y As T)
        parameters:
        - id: x
          type: '{T}'
        - id: y
          type: '{T}'
      overload: Mapbox.VectorTile.Geometry.Point2d`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.Geometry.Point2d`1.X
      commentId: F:Mapbox.VectorTile.Geometry.Point2d`1.X
      language: CSharp
      name:
        CSharp: X
        VB: X
      nameWithType:
        CSharp: Point2d<T>.X
        VB: Point2d(Of T).X
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.Point2d<T>.X
        VB: Mapbox.VectorTile.Geometry.Point2d(Of T).X
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: X
        path: ''
        startLine: 551
      syntax:
        content:
          CSharp: public T X
          VB: Public X As T
        return:
          type: '{T}'
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.Geometry.Point2d`1.Y
      commentId: F:Mapbox.VectorTile.Geometry.Point2d`1.Y
      language: CSharp
      name:
        CSharp: Y
        VB: Y
      nameWithType:
        CSharp: Point2d<T>.Y
        VB: Point2d(Of T).Y
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.Point2d<T>.Y
        VB: Mapbox.VectorTile.Geometry.Point2d(Of T).Y
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: Y
        path: ''
        startLine: 552
      syntax:
        content:
          CSharp: public T Y
          VB: Public Y As T
        return:
          type: '{T}'
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.Geometry.Point2d`1.ToLngLat(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Boolean)
      commentId: M:Mapbox.VectorTile.Geometry.Point2d`1.ToLngLat(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.Boolean)
      language: CSharp
      name:
        CSharp: ToLngLat(UInt64, UInt64, UInt64, UInt64, Boolean)
        VB: ToLngLat(UInt64, UInt64, UInt64, UInt64, Boolean)
      nameWithType:
        CSharp: Point2d<T>.ToLngLat(UInt64, UInt64, UInt64, UInt64, Boolean)
        VB: Point2d(Of T).ToLngLat(UInt64, UInt64, UInt64, UInt64, Boolean)
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.Point2d<T>.ToLngLat(System.UInt64, System.UInt64, System.UInt64, System.UInt64, System.Boolean)
        VB: Mapbox.VectorTile.Geometry.Point2d(Of T).ToLngLat(System.UInt64, System.UInt64, System.UInt64, System.UInt64, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: ToLngLat
        path: ''
        startLine: 554
      syntax:
        content:
          CSharp: public LatLng ToLngLat(ulong z, ulong x, ulong y, ulong extent, bool checkLatLngMax = false)
          VB: Public Function ToLngLat(z As ULong, x As ULong, y As ULong, extent As ULong, checkLatLngMax As Boolean = False) As LatLng
        parameters:
        - id: z
          type: System.UInt64
        - id: x
          type: System.UInt64
        - id: y
          type: System.UInt64
        - id: extent
          type: System.UInt64
        - id: checkLatLngMax
          type: System.Boolean
        return:
          type: Mapbox.VectorTile.Geometry.LatLng
      overload: Mapbox.VectorTile.Geometry.Point2d`1.ToLngLat*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Mapbox.VectorTile.Geometry.Point2d`1.ToString
      commentId: M:Mapbox.VectorTile.Geometry.Point2d`1.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: Point2d<T>.ToString()
        VB: Point2d(Of T).ToString()
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.Point2d<T>.ToString()
        VB: Mapbox.VectorTile.Geometry.Point2d(Of T).ToString()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: ToString
        path: ''
        startLine: 588
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: Mapbox.VectorTile.Geometry.Point2d`1.ToString*
      overridden: System.ValueType.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Mapbox.VectorTile.Geometry.UtilGeom
    commentId: T:Mapbox.VectorTile.Geometry.UtilGeom
    language: CSharp
    name:
      CSharp: UtilGeom
      VB: UtilGeom
    nameWithType:
      CSharp: UtilGeom
      VB: UtilGeom
    qualifiedName:
      CSharp: Mapbox.VectorTile.Geometry.UtilGeom
      VB: Mapbox.VectorTile.Geometry.UtilGeom
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Geometry
    source:
      id: UtilGeom
      path: ''
      startLine: 646
    summary: "\nGeometry related helper methods\n"
    example: []
    syntax:
      content:
        CSharp: public static class UtilGeom
        VB: Public Module UtilGeom
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries(List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}},Mapbox.VectorTile.Geometry.GeomType,System.Int64,System.UInt32,System.Single)
      commentId: M:Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries(List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}},Mapbox.VectorTile.Geometry.GeomType,System.Int64,System.UInt32,System.Single)
      language: CSharp
      name:
        CSharp: ClipGeometries(List<List<Point2d<Int64>>>, GeomType, Int64, UInt32, Single)
        VB: ClipGeometries(List(Of List(Of Point2d(Of Int64))), GeomType, Int64, UInt32, Single)
      nameWithType:
        CSharp: UtilGeom.ClipGeometries(List<List<Point2d<Int64>>>, GeomType, Int64, UInt32, Single)
        VB: UtilGeom.ClipGeometries(List(Of List(Of Point2d(Of Int64))), GeomType, Int64, UInt32, Single)
      qualifiedName:
        CSharp: Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries(List<List<Mapbox.VectorTile.Geometry.Point2d<System.Int64>>>, Mapbox.VectorTile.Geometry.GeomType, System.Int64, System.UInt32, System.Single)
        VB: Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries(List(Of List(Of Mapbox.VectorTile.Geometry.Point2d(Of System.Int64))), Mapbox.VectorTile.Geometry.GeomType, System.Int64, System.UInt32, System.Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Geometry
      source:
        id: ClipGeometries
        path: ''
        startLine: 660
      summary: "\nTO BE REMOVED!!! Processing geometries is out of scope. \nClip geometries extending beyond the tile border.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<List<Point2d<long>>> ClipGeometries(List<List<Point2d<long>>> geoms, GeomType geomType, long extent, uint bufferSize, float scale)
          VB: Public Shared Function ClipGeometries(geoms As List(Of List(Of Point2d(Of Long))), geomType As GeomType, extent As Long, bufferSize As UInteger, scale As Single) As List(Of List(Of Point2d(Of Long)))
        parameters:
        - id: geoms
          type: List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}}
          description: Raw tile geometries of the feature
        - id: geomType
          type: Mapbox.VectorTile.Geometry.GeomType
          description: Geometry type of the feature
        - id: extent
          type: System.Int64
          description: 'Extent of the layer '
        - id: bufferSize
          type: System.UInt32
          description: Units (in internal tile coordinates) to go beyond the tile border. Pass '0' to clip exactly at the tile border
        - id: scale
          type: System.Single
          description: Factor for scaling the geometries
        return:
          type: List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}}
          description: ''
      overload: Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Mapbox.VectorTile.Contants
  commentId: N:Mapbox.VectorTile.Contants
  language: CSharp
  name:
    CSharp: Mapbox.VectorTile.Contants
    VB: Mapbox.VectorTile.Contants
  nameWithType:
    CSharp: Mapbox.VectorTile.Contants
    VB: Mapbox.VectorTile.Contants
  qualifiedName:
    CSharp: Mapbox.VectorTile.Contants
    VB: Mapbox.VectorTile.Contants
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Mapbox.VectorTile.Contants.WireTypes
    commentId: T:Mapbox.VectorTile.Contants.WireTypes
    language: CSharp
    name:
      CSharp: WireTypes
      VB: WireTypes
    nameWithType:
      CSharp: WireTypes
      VB: WireTypes
    qualifiedName:
      CSharp: Mapbox.VectorTile.Contants.WireTypes
      VB: Mapbox.VectorTile.Contants.WireTypes
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Contants
    source:
      id: WireTypes
      path: ''
      startLine: 6030
    summary: "\nPBF wire types\n"
    example: []
    syntax:
      content:
        CSharp: public enum WireTypes
        VB: Public Enum WireTypes
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Mapbox.VectorTile.Contants.WireTypes.VARINT
      commentId: F:Mapbox.VectorTile.Contants.WireTypes.VARINT
      language: CSharp
      name:
        CSharp: VARINT
        VB: VARINT
      nameWithType:
        CSharp: WireTypes.VARINT
        VB: WireTypes.VARINT
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.WireTypes.VARINT
        VB: Mapbox.VectorTile.Contants.WireTypes.VARINT
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: VARINT
        path: ''
        startLine: 6032
      syntax:
        content:
          CSharp: VARINT = 0
          VB: VARINT = 0
        return:
          type: Mapbox.VectorTile.Contants.WireTypes
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.WireTypes.FIXED64
      commentId: F:Mapbox.VectorTile.Contants.WireTypes.FIXED64
      language: CSharp
      name:
        CSharp: FIXED64
        VB: FIXED64
      nameWithType:
        CSharp: WireTypes.FIXED64
        VB: WireTypes.FIXED64
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.WireTypes.FIXED64
        VB: Mapbox.VectorTile.Contants.WireTypes.FIXED64
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: FIXED64
        path: ''
        startLine: 6033
      syntax:
        content:
          CSharp: FIXED64 = 1
          VB: FIXED64 = 1
        return:
          type: Mapbox.VectorTile.Contants.WireTypes
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.WireTypes.BYTES
      commentId: F:Mapbox.VectorTile.Contants.WireTypes.BYTES
      language: CSharp
      name:
        CSharp: BYTES
        VB: BYTES
      nameWithType:
        CSharp: WireTypes.BYTES
        VB: WireTypes.BYTES
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.WireTypes.BYTES
        VB: Mapbox.VectorTile.Contants.WireTypes.BYTES
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: BYTES
        path: ''
        startLine: 6034
      syntax:
        content:
          CSharp: BYTES = 2
          VB: BYTES = 2
        return:
          type: Mapbox.VectorTile.Contants.WireTypes
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.WireTypes.FIXED32
      commentId: F:Mapbox.VectorTile.Contants.WireTypes.FIXED32
      language: CSharp
      name:
        CSharp: FIXED32
        VB: FIXED32
      nameWithType:
        CSharp: WireTypes.FIXED32
        VB: WireTypes.FIXED32
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.WireTypes.FIXED32
        VB: Mapbox.VectorTile.Contants.WireTypes.FIXED32
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: FIXED32
        path: ''
        startLine: 6035
      syntax:
        content:
          CSharp: FIXED32 = 5
          VB: FIXED32 = 5
        return:
          type: Mapbox.VectorTile.Contants.WireTypes
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.WireTypes.UNDEFINED
      commentId: F:Mapbox.VectorTile.Contants.WireTypes.UNDEFINED
      language: CSharp
      name:
        CSharp: UNDEFINED
        VB: UNDEFINED
      nameWithType:
        CSharp: WireTypes.UNDEFINED
        VB: WireTypes.UNDEFINED
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.WireTypes.UNDEFINED
        VB: Mapbox.VectorTile.Contants.WireTypes.UNDEFINED
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: UNDEFINED
        path: ''
        startLine: 6036
      syntax:
        content:
          CSharp: UNDEFINED = 99
          VB: UNDEFINED = 99
        return:
          type: Mapbox.VectorTile.Contants.WireTypes
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Mapbox.VectorTile.Contants.Commands
    commentId: T:Mapbox.VectorTile.Contants.Commands
    language: CSharp
    name:
      CSharp: Commands
      VB: Commands
    nameWithType:
      CSharp: Commands
      VB: Commands
    qualifiedName:
      CSharp: Mapbox.VectorTile.Contants.Commands
      VB: Mapbox.VectorTile.Contants.Commands
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Contants
    source:
      id: Commands
      path: ''
      startLine: 6043
    summary: "\nVector tile geometry commands https://github.com/mapbox/vector-tile-spec/tree/master/2.1#431-command-integers\n"
    example: []
    syntax:
      content:
        CSharp: public enum Commands
        VB: Public Enum Commands
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Mapbox.VectorTile.Contants.Commands.MoveTo
      commentId: F:Mapbox.VectorTile.Contants.Commands.MoveTo
      language: CSharp
      name:
        CSharp: MoveTo
        VB: MoveTo
      nameWithType:
        CSharp: Commands.MoveTo
        VB: Commands.MoveTo
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.Commands.MoveTo
        VB: Mapbox.VectorTile.Contants.Commands.MoveTo
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: MoveTo
        path: ''
        startLine: 6045
      syntax:
        content:
          CSharp: MoveTo = 1
          VB: MoveTo = 1
        return:
          type: Mapbox.VectorTile.Contants.Commands
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.Commands.LineTo
      commentId: F:Mapbox.VectorTile.Contants.Commands.LineTo
      language: CSharp
      name:
        CSharp: LineTo
        VB: LineTo
      nameWithType:
        CSharp: Commands.LineTo
        VB: Commands.LineTo
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.Commands.LineTo
        VB: Mapbox.VectorTile.Contants.Commands.LineTo
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: LineTo
        path: ''
        startLine: 6046
      syntax:
        content:
          CSharp: LineTo = 2
          VB: LineTo = 2
        return:
          type: Mapbox.VectorTile.Contants.Commands
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.Commands.ClosePath
      commentId: F:Mapbox.VectorTile.Contants.Commands.ClosePath
      language: CSharp
      name:
        CSharp: ClosePath
        VB: ClosePath
      nameWithType:
        CSharp: Commands.ClosePath
        VB: Commands.ClosePath
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.Commands.ClosePath
        VB: Mapbox.VectorTile.Contants.Commands.ClosePath
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: ClosePath
        path: ''
        startLine: 6047
      syntax:
        content:
          CSharp: ClosePath = 7
          VB: ClosePath = 7
        return:
          type: Mapbox.VectorTile.Contants.Commands
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Mapbox.VectorTile.Contants.TileType
    commentId: T:Mapbox.VectorTile.Contants.TileType
    language: CSharp
    name:
      CSharp: TileType
      VB: TileType
    nameWithType:
      CSharp: TileType
      VB: TileType
    qualifiedName:
      CSharp: Mapbox.VectorTile.Contants.TileType
      VB: Mapbox.VectorTile.Contants.TileType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Contants
    source:
      id: TileType
      path: ''
      startLine: 6054
    summary: "\nRoot types contained in the vector tile. Currently just 'Layers' https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L75\n"
    example: []
    syntax:
      content:
        CSharp: public enum TileType
        VB: Public Enum TileType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Mapbox.VectorTile.Contants.TileType.Layers
      commentId: F:Mapbox.VectorTile.Contants.TileType.Layers
      language: CSharp
      name:
        CSharp: Layers
        VB: Layers
      nameWithType:
        CSharp: TileType.Layers
        VB: TileType.Layers
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.TileType.Layers
        VB: Mapbox.VectorTile.Contants.TileType.Layers
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Layers
        path: ''
        startLine: 6056
      syntax:
        content:
          CSharp: Layers = 3
          VB: Layers = 3
        return:
          type: Mapbox.VectorTile.Contants.TileType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Mapbox.VectorTile.Contants.LayerType
    commentId: T:Mapbox.VectorTile.Contants.LayerType
    language: CSharp
    name:
      CSharp: LayerType
      VB: LayerType
    nameWithType:
      CSharp: LayerType
      VB: LayerType
    qualifiedName:
      CSharp: Mapbox.VectorTile.Contants.LayerType
      VB: Mapbox.VectorTile.Contants.LayerType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Contants
    source:
      id: LayerType
      path: ''
      startLine: 6063
    summary: "\nTypes contained in a layer https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L50-L73\n"
    example: []
    syntax:
      content:
        CSharp: public enum LayerType
        VB: Public Enum LayerType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Mapbox.VectorTile.Contants.LayerType.Version
      commentId: F:Mapbox.VectorTile.Contants.LayerType.Version
      language: CSharp
      name:
        CSharp: Version
        VB: Version
      nameWithType:
        CSharp: LayerType.Version
        VB: LayerType.Version
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.LayerType.Version
        VB: Mapbox.VectorTile.Contants.LayerType.Version
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Version
        path: ''
        startLine: 6065
      syntax:
        content:
          CSharp: Version = 15
          VB: Version = 15
        return:
          type: Mapbox.VectorTile.Contants.LayerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.LayerType.Name
      commentId: F:Mapbox.VectorTile.Contants.LayerType.Name
      language: CSharp
      name:
        CSharp: Name
        VB: Name
      nameWithType:
        CSharp: LayerType.Name
        VB: LayerType.Name
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.LayerType.Name
        VB: Mapbox.VectorTile.Contants.LayerType.Name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Name
        path: ''
        startLine: 6066
      syntax:
        content:
          CSharp: Name = 1
          VB: Name = 1
        return:
          type: Mapbox.VectorTile.Contants.LayerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.LayerType.Features
      commentId: F:Mapbox.VectorTile.Contants.LayerType.Features
      language: CSharp
      name:
        CSharp: Features
        VB: Features
      nameWithType:
        CSharp: LayerType.Features
        VB: LayerType.Features
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.LayerType.Features
        VB: Mapbox.VectorTile.Contants.LayerType.Features
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Features
        path: ''
        startLine: 6067
      syntax:
        content:
          CSharp: Features = 2
          VB: Features = 2
        return:
          type: Mapbox.VectorTile.Contants.LayerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.LayerType.Keys
      commentId: F:Mapbox.VectorTile.Contants.LayerType.Keys
      language: CSharp
      name:
        CSharp: Keys
        VB: Keys
      nameWithType:
        CSharp: LayerType.Keys
        VB: LayerType.Keys
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.LayerType.Keys
        VB: Mapbox.VectorTile.Contants.LayerType.Keys
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Keys
        path: ''
        startLine: 6068
      syntax:
        content:
          CSharp: Keys = 3
          VB: Keys = 3
        return:
          type: Mapbox.VectorTile.Contants.LayerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.LayerType.Values
      commentId: F:Mapbox.VectorTile.Contants.LayerType.Values
      language: CSharp
      name:
        CSharp: Values
        VB: Values
      nameWithType:
        CSharp: LayerType.Values
        VB: LayerType.Values
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.LayerType.Values
        VB: Mapbox.VectorTile.Contants.LayerType.Values
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Values
        path: ''
        startLine: 6069
      syntax:
        content:
          CSharp: Values = 4
          VB: Values = 4
        return:
          type: Mapbox.VectorTile.Contants.LayerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.LayerType.Extent
      commentId: F:Mapbox.VectorTile.Contants.LayerType.Extent
      language: CSharp
      name:
        CSharp: Extent
        VB: Extent
      nameWithType:
        CSharp: LayerType.Extent
        VB: LayerType.Extent
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.LayerType.Extent
        VB: Mapbox.VectorTile.Contants.LayerType.Extent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Extent
        path: ''
        startLine: 6070
      syntax:
        content:
          CSharp: Extent = 5
          VB: Extent = 5
        return:
          type: Mapbox.VectorTile.Contants.LayerType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Mapbox.VectorTile.Contants.FeatureType
    commentId: T:Mapbox.VectorTile.Contants.FeatureType
    language: CSharp
    name:
      CSharp: FeatureType
      VB: FeatureType
    nameWithType:
      CSharp: FeatureType
      VB: FeatureType
    qualifiedName:
      CSharp: Mapbox.VectorTile.Contants.FeatureType
      VB: Mapbox.VectorTile.Contants.FeatureType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Contants
    source:
      id: FeatureType
      path: ''
      startLine: 6077
    summary: "\nTypes contained in a feature https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L31-L47\n"
    example: []
    syntax:
      content:
        CSharp: public enum FeatureType
        VB: Public Enum FeatureType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Mapbox.VectorTile.Contants.FeatureType.Id
      commentId: F:Mapbox.VectorTile.Contants.FeatureType.Id
      language: CSharp
      name:
        CSharp: Id
        VB: Id
      nameWithType:
        CSharp: FeatureType.Id
        VB: FeatureType.Id
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.FeatureType.Id
        VB: Mapbox.VectorTile.Contants.FeatureType.Id
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Id
        path: ''
        startLine: 6079
      syntax:
        content:
          CSharp: Id = 1
          VB: Id = 1
        return:
          type: Mapbox.VectorTile.Contants.FeatureType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.FeatureType.Tags
      commentId: F:Mapbox.VectorTile.Contants.FeatureType.Tags
      language: CSharp
      name:
        CSharp: Tags
        VB: Tags
      nameWithType:
        CSharp: FeatureType.Tags
        VB: FeatureType.Tags
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.FeatureType.Tags
        VB: Mapbox.VectorTile.Contants.FeatureType.Tags
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Tags
        path: ''
        startLine: 6080
      syntax:
        content:
          CSharp: Tags = 2
          VB: Tags = 2
        return:
          type: Mapbox.VectorTile.Contants.FeatureType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.FeatureType.Type
      commentId: F:Mapbox.VectorTile.Contants.FeatureType.Type
      language: CSharp
      name:
        CSharp: Type
        VB: Type
      nameWithType:
        CSharp: FeatureType.Type
        VB: FeatureType.Type
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.FeatureType.Type
        VB: Mapbox.VectorTile.Contants.FeatureType.Type
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Type
        path: ''
        startLine: 6081
      syntax:
        content:
          CSharp: Type = 3
          VB: Type = 3
        return:
          type: Mapbox.VectorTile.Contants.FeatureType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.FeatureType.Geometry
      commentId: F:Mapbox.VectorTile.Contants.FeatureType.Geometry
      language: CSharp
      name:
        CSharp: Geometry
        VB: Geometry
      nameWithType:
        CSharp: FeatureType.Geometry
        VB: FeatureType.Geometry
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.FeatureType.Geometry
        VB: Mapbox.VectorTile.Contants.FeatureType.Geometry
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Geometry
        path: ''
        startLine: 6082
      syntax:
        content:
          CSharp: Geometry = 4
          VB: Geometry = 4
        return:
          type: Mapbox.VectorTile.Contants.FeatureType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.FeatureType.Raster
      commentId: F:Mapbox.VectorTile.Contants.FeatureType.Raster
      language: CSharp
      name:
        CSharp: Raster
        VB: Raster
      nameWithType:
        CSharp: FeatureType.Raster
        VB: FeatureType.Raster
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.FeatureType.Raster
        VB: Mapbox.VectorTile.Contants.FeatureType.Raster
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Raster
        path: ''
        startLine: 6083
      syntax:
        content:
          CSharp: Raster = 5
          VB: Raster = 5
        return:
          type: Mapbox.VectorTile.Contants.FeatureType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Mapbox.VectorTile.Contants.ValueType
    commentId: T:Mapbox.VectorTile.Contants.ValueType
    language: CSharp
    name:
      CSharp: ValueType
      VB: ValueType
    nameWithType:
      CSharp: ValueType
      VB: ValueType
    qualifiedName:
      CSharp: Mapbox.VectorTile.Contants.ValueType
      VB: Mapbox.VectorTile.Contants.ValueType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Contants
    source:
      id: ValueType
      path: ''
      startLine: 6090
    summary: "\nAvailable ypes for values https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L17-L28\n"
    example: []
    syntax:
      content:
        CSharp: public enum ValueType
        VB: Public Enum ValueType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Mapbox.VectorTile.Contants.ValueType.String
      commentId: F:Mapbox.VectorTile.Contants.ValueType.String
      language: CSharp
      name:
        CSharp: String
        VB: String
      nameWithType:
        CSharp: ValueType.String
        VB: ValueType.String
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ValueType.String
        VB: Mapbox.VectorTile.Contants.ValueType.String
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: String
        path: ''
        startLine: 6092
      syntax:
        content:
          CSharp: String = 1
          VB: String = 1
        return:
          type: Mapbox.VectorTile.Contants.ValueType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.ValueType.Float
      commentId: F:Mapbox.VectorTile.Contants.ValueType.Float
      language: CSharp
      name:
        CSharp: Float
        VB: Float
      nameWithType:
        CSharp: ValueType.Float
        VB: ValueType.Float
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ValueType.Float
        VB: Mapbox.VectorTile.Contants.ValueType.Float
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Float
        path: ''
        startLine: 6093
      syntax:
        content:
          CSharp: Float = 2
          VB: Float = 2
        return:
          type: Mapbox.VectorTile.Contants.ValueType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.ValueType.Double
      commentId: F:Mapbox.VectorTile.Contants.ValueType.Double
      language: CSharp
      name:
        CSharp: Double
        VB: Double
      nameWithType:
        CSharp: ValueType.Double
        VB: ValueType.Double
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ValueType.Double
        VB: Mapbox.VectorTile.Contants.ValueType.Double
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Double
        path: ''
        startLine: 6094
      syntax:
        content:
          CSharp: Double = 3
          VB: Double = 3
        return:
          type: Mapbox.VectorTile.Contants.ValueType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.ValueType.Int
      commentId: F:Mapbox.VectorTile.Contants.ValueType.Int
      language: CSharp
      name:
        CSharp: Int
        VB: Int
      nameWithType:
        CSharp: ValueType.Int
        VB: ValueType.Int
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ValueType.Int
        VB: Mapbox.VectorTile.Contants.ValueType.Int
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Int
        path: ''
        startLine: 6095
      syntax:
        content:
          CSharp: Int = 4
          VB: Int = 4
        return:
          type: Mapbox.VectorTile.Contants.ValueType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.ValueType.UInt
      commentId: F:Mapbox.VectorTile.Contants.ValueType.UInt
      language: CSharp
      name:
        CSharp: UInt
        VB: UInt
      nameWithType:
        CSharp: ValueType.UInt
        VB: ValueType.UInt
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ValueType.UInt
        VB: Mapbox.VectorTile.Contants.ValueType.UInt
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: UInt
        path: ''
        startLine: 6096
      syntax:
        content:
          CSharp: UInt = 5
          VB: UInt = 5
        return:
          type: Mapbox.VectorTile.Contants.ValueType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.ValueType.SInt
      commentId: F:Mapbox.VectorTile.Contants.ValueType.SInt
      language: CSharp
      name:
        CSharp: SInt
        VB: SInt
      nameWithType:
        CSharp: ValueType.SInt
        VB: ValueType.SInt
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ValueType.SInt
        VB: Mapbox.VectorTile.Contants.ValueType.SInt
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: SInt
        path: ''
        startLine: 6097
      syntax:
        content:
          CSharp: SInt = 6
          VB: SInt = 6
        return:
          type: Mapbox.VectorTile.Contants.ValueType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Mapbox.VectorTile.Contants.ValueType.Bool
      commentId: F:Mapbox.VectorTile.Contants.ValueType.Bool
      language: CSharp
      name:
        CSharp: Bool
        VB: Bool
      nameWithType:
        CSharp: ValueType.Bool
        VB: ValueType.Bool
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ValueType.Bool
        VB: Mapbox.VectorTile.Contants.ValueType.Bool
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: Bool
        path: ''
        startLine: 6098
      syntax:
        content:
          CSharp: Bool = 7
          VB: Bool = 7
        return:
          type: Mapbox.VectorTile.Contants.ValueType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Mapbox.VectorTile.Contants.ConstantsAsDictionary
    commentId: T:Mapbox.VectorTile.Contants.ConstantsAsDictionary
    language: CSharp
    name:
      CSharp: ConstantsAsDictionary
      VB: ConstantsAsDictionary
    nameWithType:
      CSharp: ConstantsAsDictionary
      VB: ConstantsAsDictionary
    qualifiedName:
      CSharp: Mapbox.VectorTile.Contants.ConstantsAsDictionary
      VB: Mapbox.VectorTile.Contants.ConstantsAsDictionary
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Mapbox.VectorTile.Contants
    source:
      id: ConstantsAsDictionary
      path: ''
      startLine: 6105
    summary: "\n[wip] Investigate how to increase decoding speed. Looking up values in enums is slow\n"
    example: []
    syntax:
      content:
        CSharp: public static class ConstantsAsDictionary
        VB: Public Module ConstantsAsDictionary
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ToString
    - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Mapbox.VectorTile.Contants.ConstantsAsDictionary.TileType
      commentId: F:Mapbox.VectorTile.Contants.ConstantsAsDictionary.TileType
      language: CSharp
      name:
        CSharp: TileType
        VB: TileType
      nameWithType:
        CSharp: ConstantsAsDictionary.TileType
        VB: ConstantsAsDictionary.TileType
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ConstantsAsDictionary.TileType
        VB: Mapbox.VectorTile.Contants.ConstantsAsDictionary.TileType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: TileType
        path: ''
        startLine: 6112
      summary: "\nRoot types contained in the vector tile. Currently just 'Layers' https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L75\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly Dictionary<int, string> TileType
          VB: Public Shared ReadOnly TileType As Dictionary(Of Integer, String)
        return:
          type: Dictionary{System.Int32,System.String}
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Mapbox.VectorTile.Contants.ConstantsAsDictionary.LayerType
      commentId: F:Mapbox.VectorTile.Contants.ConstantsAsDictionary.LayerType
      language: CSharp
      name:
        CSharp: LayerType
        VB: LayerType
      nameWithType:
        CSharp: ConstantsAsDictionary.LayerType
        VB: ConstantsAsDictionary.LayerType
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ConstantsAsDictionary.LayerType
        VB: Mapbox.VectorTile.Contants.ConstantsAsDictionary.LayerType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: LayerType
        path: ''
        startLine: 6121
      summary: "\nTypes contained in a layer https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L50-L73\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly Dictionary<int, string> LayerType
          VB: Public Shared ReadOnly LayerType As Dictionary(Of Integer, String)
        return:
          type: Dictionary{System.Int32,System.String}
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Mapbox.VectorTile.Contants.ConstantsAsDictionary.FeatureType
      commentId: F:Mapbox.VectorTile.Contants.ConstantsAsDictionary.FeatureType
      language: CSharp
      name:
        CSharp: FeatureType
        VB: FeatureType
      nameWithType:
        CSharp: ConstantsAsDictionary.FeatureType
        VB: ConstantsAsDictionary.FeatureType
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ConstantsAsDictionary.FeatureType
        VB: Mapbox.VectorTile.Contants.ConstantsAsDictionary.FeatureType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: FeatureType
        path: ''
        startLine: 6134
      summary: "\nTypes contained in a feature https://github.com/mapbox/vector-tile-spec/blob/master/2.1/vector_tile.proto#L31-L47\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly Dictionary<int, string> FeatureType
          VB: Public Shared ReadOnly FeatureType As Dictionary(Of Integer, String)
        return:
          type: Dictionary{System.Int32,System.String}
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
    - id: Mapbox.VectorTile.Contants.ConstantsAsDictionary.GeomType
      commentId: F:Mapbox.VectorTile.Contants.ConstantsAsDictionary.GeomType
      language: CSharp
      name:
        CSharp: GeomType
        VB: GeomType
      nameWithType:
        CSharp: ConstantsAsDictionary.GeomType
        VB: ConstantsAsDictionary.GeomType
      qualifiedName:
        CSharp: Mapbox.VectorTile.Contants.ConstantsAsDictionary.GeomType
        VB: Mapbox.VectorTile.Contants.ConstantsAsDictionary.GeomType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Mapbox.VectorTile.Contants
      source:
        id: GeomType
        path: ''
        startLine: 6147
      summary: "\nAvailable geometry types https://github.com/mapbox/vector-tile-spec/tree/master/2.1#434-geometry-types\n"
      example: []
      syntax:
        content:
          CSharp: public static readonly Dictionary<int, string> GeomType
          VB: Public Shared ReadOnly GeomType As Dictionary(Of Integer, String)
        return:
          type: Dictionary{System.Int32,System.String}
      modifiers:
        CSharp:
        - public
        - static
        - readonly
        VB:
        - Public
        - Shared
        - ReadOnly
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Mapbox.VectorTile.PbfReader.Tag*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.Tag*
        name: Tag
        nameWithType: PbfReader.Tag
        qualifiedName: Mapbox.VectorTile.PbfReader.Tag
      VB:
      - id: Mapbox.VectorTile.PbfReader.Tag*
        name: Tag
        nameWithType: PbfReader.Tag
        qualifiedName: Mapbox.VectorTile.PbfReader.Tag
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.Tag
  System.UInt64:
    name:
      CSharp:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
      VB:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt64
  Mapbox.VectorTile.PbfReader.Value*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.Value*
        name: Value
        nameWithType: PbfReader.Value
        qualifiedName: Mapbox.VectorTile.PbfReader.Value
      VB:
      - id: Mapbox.VectorTile.PbfReader.Value*
        name: Value
        nameWithType: PbfReader.Value
        qualifiedName: Mapbox.VectorTile.PbfReader.Value
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.Value
  WireTypes:
    name:
      CSharp:
      - id: WireTypes
        name: WireTypes
        nameWithType: WireTypes
        qualifiedName: WireTypes
        isExternal: true
      VB:
      - id: WireTypes
        name: WireTypes
        nameWithType: WireTypes
        qualifiedName: WireTypes
        isExternal: true
    isDefinition: true
    commentId: '!:WireTypes'
  Mapbox.VectorTile.PbfReader.WireType*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.WireType*
        name: WireType
        nameWithType: PbfReader.WireType
        qualifiedName: Mapbox.VectorTile.PbfReader.WireType
      VB:
      - id: Mapbox.VectorTile.PbfReader.WireType*
        name: WireType
        nameWithType: PbfReader.WireType
        qualifiedName: Mapbox.VectorTile.PbfReader.WireType
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.WireType
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Mapbox.VectorTile.PbfReader.#ctor*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.#ctor*
        name: PbfReader
        nameWithType: PbfReader.PbfReader
        qualifiedName: Mapbox.VectorTile.PbfReader.PbfReader
      VB:
      - id: Mapbox.VectorTile.PbfReader.#ctor*
        name: PbfReader
        nameWithType: PbfReader.PbfReader
        qualifiedName: Mapbox.VectorTile.PbfReader.PbfReader
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.#ctor
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  Mapbox.VectorTile.PbfReader.Varint*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.Varint*
        name: Varint
        nameWithType: PbfReader.Varint
        qualifiedName: Mapbox.VectorTile.PbfReader.Varint
      VB:
      - id: Mapbox.VectorTile.PbfReader.Varint*
        name: Varint
        nameWithType: PbfReader.Varint
        qualifiedName: Mapbox.VectorTile.PbfReader.Varint
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.Varint
  Mapbox.VectorTile.PbfReader.View*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.View*
        name: View
        nameWithType: PbfReader.View
        qualifiedName: Mapbox.VectorTile.PbfReader.View
      VB:
      - id: Mapbox.VectorTile.PbfReader.View*
        name: View
        nameWithType: PbfReader.View
        qualifiedName: Mapbox.VectorTile.PbfReader.View
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.View
  List`1:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  List{System.UInt32}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{System.UInt32}'
  Mapbox.VectorTile.PbfReader.GetPackedUnit32*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.GetPackedUnit32*
        name: GetPackedUnit32
        nameWithType: PbfReader.GetPackedUnit32
        qualifiedName: Mapbox.VectorTile.PbfReader.GetPackedUnit32
      VB:
      - id: Mapbox.VectorTile.PbfReader.GetPackedUnit32*
        name: GetPackedUnit32
        nameWithType: PbfReader.GetPackedUnit32
        qualifiedName: Mapbox.VectorTile.PbfReader.GetPackedUnit32
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.GetPackedUnit32
  List{System.Int32}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{System.Int32}'
  Mapbox.VectorTile.PbfReader.GetPackedSInt32*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.GetPackedSInt32*
        name: GetPackedSInt32
        nameWithType: PbfReader.GetPackedSInt32
        qualifiedName: Mapbox.VectorTile.PbfReader.GetPackedSInt32
      VB:
      - id: Mapbox.VectorTile.PbfReader.GetPackedSInt32*
        name: GetPackedSInt32
        nameWithType: PbfReader.GetPackedSInt32
        qualifiedName: Mapbox.VectorTile.PbfReader.GetPackedSInt32
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.GetPackedSInt32
  List{System.Int64}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{System.Int64}'
  Mapbox.VectorTile.PbfReader.GetPackedSInt64*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.GetPackedSInt64*
        name: GetPackedSInt64
        nameWithType: PbfReader.GetPackedSInt64
        qualifiedName: Mapbox.VectorTile.PbfReader.GetPackedSInt64
      VB:
      - id: Mapbox.VectorTile.PbfReader.GetPackedSInt64*
        name: GetPackedSInt64
        nameWithType: PbfReader.GetPackedSInt64
        qualifiedName: Mapbox.VectorTile.PbfReader.GetPackedSInt64
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.GetPackedSInt64
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Double
  Mapbox.VectorTile.PbfReader.GetDouble*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.GetDouble*
        name: GetDouble
        nameWithType: PbfReader.GetDouble
        qualifiedName: Mapbox.VectorTile.PbfReader.GetDouble
      VB:
      - id: Mapbox.VectorTile.PbfReader.GetDouble*
        name: GetDouble
        nameWithType: PbfReader.GetDouble
        qualifiedName: Mapbox.VectorTile.PbfReader.GetDouble
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.GetDouble
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Mapbox.VectorTile.PbfReader.GetFloat*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.GetFloat*
        name: GetFloat
        nameWithType: PbfReader.GetFloat
        qualifiedName: Mapbox.VectorTile.PbfReader.GetFloat
      VB:
      - id: Mapbox.VectorTile.PbfReader.GetFloat*
        name: GetFloat
        nameWithType: PbfReader.GetFloat
        qualifiedName: Mapbox.VectorTile.PbfReader.GetFloat
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.GetFloat
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Mapbox.VectorTile.PbfReader.GetString*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.GetString*
        name: GetString
        nameWithType: PbfReader.GetString
        qualifiedName: Mapbox.VectorTile.PbfReader.GetString
      VB:
      - id: Mapbox.VectorTile.PbfReader.GetString*
        name: GetString
        nameWithType: PbfReader.GetString
        qualifiedName: Mapbox.VectorTile.PbfReader.GetString
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.GetString
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Mapbox.VectorTile.PbfReader.NextByte*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.NextByte*
        name: NextByte
        nameWithType: PbfReader.NextByte
        qualifiedName: Mapbox.VectorTile.PbfReader.NextByte
      VB:
      - id: Mapbox.VectorTile.PbfReader.NextByte*
        name: NextByte
        nameWithType: PbfReader.NextByte
        qualifiedName: Mapbox.VectorTile.PbfReader.NextByte
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.NextByte
  Mapbox.VectorTile.PbfReader.SkipVarint*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.SkipVarint*
        name: SkipVarint
        nameWithType: PbfReader.SkipVarint
        qualifiedName: Mapbox.VectorTile.PbfReader.SkipVarint
      VB:
      - id: Mapbox.VectorTile.PbfReader.SkipVarint*
        name: SkipVarint
        nameWithType: PbfReader.SkipVarint
        qualifiedName: Mapbox.VectorTile.PbfReader.SkipVarint
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.SkipVarint
  Mapbox.VectorTile.PbfReader.SkipBytes*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.SkipBytes*
        name: SkipBytes
        nameWithType: PbfReader.SkipBytes
        qualifiedName: Mapbox.VectorTile.PbfReader.SkipBytes
      VB:
      - id: Mapbox.VectorTile.PbfReader.SkipBytes*
        name: SkipBytes
        nameWithType: PbfReader.SkipBytes
        qualifiedName: Mapbox.VectorTile.PbfReader.SkipBytes
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.SkipBytes
  Mapbox.VectorTile.PbfReader.Skip*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader.Skip*
        name: Skip
        nameWithType: PbfReader.Skip
        qualifiedName: Mapbox.VectorTile.PbfReader.Skip
      VB:
      - id: Mapbox.VectorTile.PbfReader.Skip*
        name: Skip
        nameWithType: PbfReader.Skip
        qualifiedName: Mapbox.VectorTile.PbfReader.Skip
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.PbfReader.Skip
  Mapbox.VectorTile.PbfReader:
    name:
      CSharp:
      - id: Mapbox.VectorTile.PbfReader
        name: PbfReader
        nameWithType: PbfReader
        qualifiedName: Mapbox.VectorTile.PbfReader
      VB:
      - id: Mapbox.VectorTile.PbfReader
        name: PbfReader
        nameWithType: PbfReader
        qualifiedName: Mapbox.VectorTile.PbfReader
    isDefinition: true
    commentId: T:Mapbox.VectorTile.PbfReader
  Mapbox.VectorTile.VectorTile.#ctor*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTile.#ctor*
        name: VectorTile
        nameWithType: VectorTile.VectorTile
        qualifiedName: Mapbox.VectorTile.VectorTile.VectorTile
      VB:
      - id: Mapbox.VectorTile.VectorTile.#ctor*
        name: VectorTile
        nameWithType: VectorTile.VectorTile
        qualifiedName: Mapbox.VectorTile.VectorTile.VectorTile
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTile.#ctor
  ReadOnlyCollection`1:
    name:
      CSharp:
      - id: ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: ReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: ReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  ReadOnlyCollection{System.String}:
    name:
      CSharp:
      - id: ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: ReadOnlyCollection
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: ReadOnlyCollection`1
        name: ReadOnlyCollection
        nameWithType: ReadOnlyCollection
        qualifiedName: ReadOnlyCollection
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: ReadOnlyCollection`1
    commentId: '!:ReadOnlyCollection{System.String}'
  Mapbox.VectorTile.VectorTile.LayerNames*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTile.LayerNames*
        name: LayerNames
        nameWithType: VectorTile.LayerNames
        qualifiedName: Mapbox.VectorTile.VectorTile.LayerNames
      VB:
      - id: Mapbox.VectorTile.VectorTile.LayerNames*
        name: LayerNames
        nameWithType: VectorTile.LayerNames
        qualifiedName: Mapbox.VectorTile.VectorTile.LayerNames
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTile.LayerNames
  Mapbox.VectorTile.VectorTileLayer:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer
        name: VectorTileLayer
        nameWithType: VectorTileLayer
        qualifiedName: Mapbox.VectorTile.VectorTileLayer
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer
        name: VectorTileLayer
        nameWithType: VectorTileLayer
        qualifiedName: Mapbox.VectorTile.VectorTileLayer
    isDefinition: true
    parent: Mapbox.VectorTile
    commentId: T:Mapbox.VectorTile.VectorTileLayer
  Mapbox.VectorTile:
    name:
      CSharp:
      - name: Mapbox.VectorTile
        nameWithType: Mapbox.VectorTile
        qualifiedName: Mapbox.VectorTile
      VB:
      - name: Mapbox.VectorTile
        nameWithType: Mapbox.VectorTile
        qualifiedName: Mapbox.VectorTile
    isDefinition: true
    commentId: N:Mapbox.VectorTile
  Mapbox.VectorTile.VectorTile.GetLayer*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTile.GetLayer*
        name: GetLayer
        nameWithType: VectorTile.GetLayer
        qualifiedName: Mapbox.VectorTile.VectorTile.GetLayer
      VB:
      - id: Mapbox.VectorTile.VectorTile.GetLayer*
        name: GetLayer
        nameWithType: VectorTile.GetLayer
        qualifiedName: Mapbox.VectorTile.VectorTile.GetLayer
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTile.GetLayer
  Mapbox.VectorTile.VectorTile:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTile
        name: VectorTile
        nameWithType: VectorTile
        qualifiedName: Mapbox.VectorTile.VectorTile
      VB:
      - id: Mapbox.VectorTile.VectorTile
        name: VectorTile
        nameWithType: VectorTile
        qualifiedName: Mapbox.VectorTile.VectorTile
    isDefinition: true
    parent: Mapbox.VectorTile
    commentId: T:Mapbox.VectorTile.VectorTile
  System.Nullable`1:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Nullable`1
  System.Nullable{System.UInt32}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.UInt32}
  Mapbox.VectorTile.VectorTileFeature.#ctor*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.#ctor*
        name: VectorTileFeature
        nameWithType: VectorTileFeature.VectorTileFeature
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.VectorTileFeature
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.#ctor*
        name: VectorTileFeature
        nameWithType: VectorTileFeature.VectorTileFeature
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.VectorTileFeature
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.#ctor
  Mapbox.VectorTile.VectorTileFeature.Id*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.Id*
        name: Id
        nameWithType: VectorTileFeature.Id
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.Id
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.Id*
        name: Id
        nameWithType: VectorTileFeature.Id
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.Id
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.Id
  Mapbox.VectorTile.VectorTileFeature.Layer*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.Layer*
        name: Layer
        nameWithType: VectorTileFeature.Layer
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.Layer
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.Layer*
        name: Layer
        nameWithType: VectorTileFeature.Layer
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.Layer
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.Layer
  Mapbox.VectorTile.Geometry.GeomType:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.GeomType
        name: GeomType
        nameWithType: GeomType
        qualifiedName: Mapbox.VectorTile.Geometry.GeomType
      VB:
      - id: Mapbox.VectorTile.Geometry.GeomType
        name: GeomType
        nameWithType: GeomType
        qualifiedName: Mapbox.VectorTile.Geometry.GeomType
    isDefinition: true
    parent: Mapbox.VectorTile.Geometry
    commentId: T:Mapbox.VectorTile.Geometry.GeomType
  Mapbox.VectorTile.Geometry:
    name:
      CSharp:
      - name: Mapbox.VectorTile.Geometry
        nameWithType: Mapbox.VectorTile.Geometry
        qualifiedName: Mapbox.VectorTile.Geometry
      VB:
      - name: Mapbox.VectorTile.Geometry
        nameWithType: Mapbox.VectorTile.Geometry
        qualifiedName: Mapbox.VectorTile.Geometry
    isDefinition: true
    commentId: N:Mapbox.VectorTile.Geometry
  Mapbox.VectorTile.VectorTileFeature.GeometryType*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.GeometryType*
        name: GeometryType
        nameWithType: VectorTileFeature.GeometryType
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.GeometryType
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.GeometryType*
        name: GeometryType
        nameWithType: VectorTileFeature.GeometryType
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.GeometryType
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.GeometryType
  Mapbox.VectorTile.VectorTileFeature.GeometryCommands*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.GeometryCommands*
        name: GeometryCommands
        nameWithType: VectorTileFeature.GeometryCommands
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.GeometryCommands
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.GeometryCommands*
        name: GeometryCommands
        nameWithType: VectorTileFeature.GeometryCommands
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.GeometryCommands
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.GeometryCommands
  List{List{Mapbox.VectorTile.Geometry.Point2d{{T}}}}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Mapbox.VectorTile.Geometry.Point2d`1
        name: Point2d
        nameWithType: Point2d
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Mapbox.VectorTile.Geometry.Point2d`1
        name: Point2d
        nameWithType: Point2d
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{List{Mapbox.VectorTile.Geometry.Point2d{``0}}}'
  System.Nullable{System.Single}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    parent: System
    commentId: T:System.Nullable{System.Single}
  Mapbox.VectorTile.VectorTileFeature.Geometry*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.Geometry*
        name: Geometry
        nameWithType: VectorTileFeature.Geometry
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.Geometry
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.Geometry*
        name: Geometry
        nameWithType: VectorTileFeature.Geometry
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.Geometry
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.Geometry
  Mapbox.VectorTile.VectorTileFeature.Tags*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.Tags*
        name: Tags
        nameWithType: VectorTileFeature.Tags
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.Tags
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.Tags*
        name: Tags
        nameWithType: VectorTileFeature.Tags
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.Tags
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.Tags
  Dictionary`2:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Dictionary{System.String,System.Object}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.String,System.Object}'
  Mapbox.VectorTile.VectorTileFeature.GetProperties*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.GetProperties*
        name: GetProperties
        nameWithType: VectorTileFeature.GetProperties
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.GetProperties
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.GetProperties*
        name: GetProperties
        nameWithType: VectorTileFeature.GetProperties
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.GetProperties
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.GetProperties
  Mapbox.VectorTile.VectorTileFeature.GetValue*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature.GetValue*
        name: GetValue
        nameWithType: VectorTileFeature.GetValue
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.GetValue
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature.GetValue*
        name: GetValue
        nameWithType: VectorTileFeature.GetValue
        qualifiedName: Mapbox.VectorTile.VectorTileFeature.GetValue
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileFeature.GetValue
  Mapbox.VectorTile.VectorTileFeature:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileFeature
        name: VectorTileFeature
        nameWithType: VectorTileFeature
        qualifiedName: Mapbox.VectorTile.VectorTileFeature
      VB:
      - id: Mapbox.VectorTile.VectorTileFeature
        name: VectorTileFeature
        nameWithType: VectorTileFeature
        qualifiedName: Mapbox.VectorTile.VectorTileFeature
    isDefinition: true
    parent: Mapbox.VectorTile
    commentId: T:Mapbox.VectorTile.VectorTileFeature
  Mapbox.VectorTile.VectorTileLayer.#ctor*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.#ctor*
        name: VectorTileLayer
        nameWithType: VectorTileLayer.VectorTileLayer
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.VectorTileLayer
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.#ctor*
        name: VectorTileLayer
        nameWithType: VectorTileLayer.VectorTileLayer
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.VectorTileLayer
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.#ctor
  Mapbox.VectorTile.VectorTileLayer.Data*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.Data*
        name: Data
        nameWithType: VectorTileLayer.Data
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Data
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.Data*
        name: Data
        nameWithType: VectorTileLayer.Data
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Data
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.Data
  Mapbox.VectorTile.VectorTileLayer.FeatureCount*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.FeatureCount*
        name: FeatureCount
        nameWithType: VectorTileLayer.FeatureCount
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.FeatureCount
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.FeatureCount*
        name: FeatureCount
        nameWithType: VectorTileLayer.FeatureCount
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.FeatureCount
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.FeatureCount
  Mapbox.VectorTile.VectorTileLayer.GetFeature*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.GetFeature*
        name: GetFeature
        nameWithType: VectorTileLayer.GetFeature
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.GetFeature
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.GetFeature*
        name: GetFeature
        nameWithType: VectorTileLayer.GetFeature
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.GetFeature
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.GetFeature
  Mapbox.VectorTile.VectorTileLayer.AddFeatureData*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.AddFeatureData*
        name: AddFeatureData
        nameWithType: VectorTileLayer.AddFeatureData
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.AddFeatureData
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.AddFeatureData*
        name: AddFeatureData
        nameWithType: VectorTileLayer.AddFeatureData
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.AddFeatureData
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.AddFeatureData
  Mapbox.VectorTile.VectorTileLayer.Name*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.Name*
        name: Name
        nameWithType: VectorTileLayer.Name
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Name
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.Name*
        name: Name
        nameWithType: VectorTileLayer.Name
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Name
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.Name
  Mapbox.VectorTile.VectorTileLayer.Version*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.Version*
        name: Version
        nameWithType: VectorTileLayer.Version
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Version
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.Version*
        name: Version
        nameWithType: VectorTileLayer.Version
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Version
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.Version
  Mapbox.VectorTile.VectorTileLayer.Extent*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.Extent*
        name: Extent
        nameWithType: VectorTileLayer.Extent
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Extent
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.Extent*
        name: Extent
        nameWithType: VectorTileLayer.Extent
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Extent
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.Extent
  List{System.Object}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{System.Object}'
  Mapbox.VectorTile.VectorTileLayer.Values*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.Values*
        name: Values
        nameWithType: VectorTileLayer.Values
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Values
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.Values*
        name: Values
        nameWithType: VectorTileLayer.Values
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Values
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.Values
  List{System.String}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{System.String}'
  Mapbox.VectorTile.VectorTileLayer.Keys*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileLayer.Keys*
        name: Keys
        nameWithType: VectorTileLayer.Keys
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Keys
      VB:
      - id: Mapbox.VectorTile.VectorTileLayer.Keys*
        name: Keys
        nameWithType: VectorTileLayer.Keys
        qualifiedName: Mapbox.VectorTile.VectorTileLayer.Keys
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileLayer.Keys
  Mapbox.VectorTile.VectorTileReader.#ctor*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileReader.#ctor*
        name: VectorTileReader
        nameWithType: VectorTileReader.VectorTileReader
        qualifiedName: Mapbox.VectorTile.VectorTileReader.VectorTileReader
      VB:
      - id: Mapbox.VectorTile.VectorTileReader.#ctor*
        name: VectorTileReader
        nameWithType: VectorTileReader.VectorTileReader
        qualifiedName: Mapbox.VectorTile.VectorTileReader.VectorTileReader
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileReader.#ctor
  Mapbox.VectorTile.VectorTileReader.LayerNames*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileReader.LayerNames*
        name: LayerNames
        nameWithType: VectorTileReader.LayerNames
        qualifiedName: Mapbox.VectorTile.VectorTileReader.LayerNames
      VB:
      - id: Mapbox.VectorTile.VectorTileReader.LayerNames*
        name: LayerNames
        nameWithType: VectorTileReader.LayerNames
        qualifiedName: Mapbox.VectorTile.VectorTileReader.LayerNames
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileReader.LayerNames
  Mapbox.VectorTile.VectorTileReader.GetLayer*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileReader.GetLayer*
        name: GetLayer
        nameWithType: VectorTileReader.GetLayer
        qualifiedName: Mapbox.VectorTile.VectorTileReader.GetLayer
      VB:
      - id: Mapbox.VectorTile.VectorTileReader.GetLayer*
        name: GetLayer
        nameWithType: VectorTileReader.GetLayer
        qualifiedName: Mapbox.VectorTile.VectorTileReader.GetLayer
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileReader.GetLayer
  Mapbox.VectorTile.VectorTileReader.GetFeature*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileReader.GetFeature*
        name: GetFeature
        nameWithType: VectorTileReader.GetFeature
        qualifiedName: Mapbox.VectorTile.VectorTileReader.GetFeature
      VB:
      - id: Mapbox.VectorTile.VectorTileReader.GetFeature*
        name: GetFeature
        nameWithType: VectorTileReader.GetFeature
        qualifiedName: Mapbox.VectorTile.VectorTileReader.GetFeature
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.VectorTileReader.GetFeature
  Mapbox.VectorTile.VectorTileReader:
    name:
      CSharp:
      - id: Mapbox.VectorTile.VectorTileReader
        name: VectorTileReader
        nameWithType: VectorTileReader
        qualifiedName: Mapbox.VectorTile.VectorTileReader
      VB:
      - id: Mapbox.VectorTile.VectorTileReader
        name: VectorTileReader
        nameWithType: VectorTileReader
        qualifiedName: Mapbox.VectorTile.VectorTileReader
    isDefinition: true
    commentId: T:Mapbox.VectorTile.VectorTileReader
  System.Enum:
    name:
      CSharp:
      - id: System.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: System.Enum
        isExternal: true
      VB:
      - id: System.Enum
        name: Enum
        nameWithType: Enum
        qualifiedName: System.Enum
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Enum
  Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description*
        name: Description
        nameWithType: EnumExtensions.Description
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description
      VB:
      - id: Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description*
        name: Description
        nameWithType: EnumExtensions.Description
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.ExtensionMethods.EnumExtensions.Description
  Mapbox.VectorTile.ExtensionMethods.EnumExtensions:
    name:
      CSharp:
      - id: Mapbox.VectorTile.ExtensionMethods.EnumExtensions
        name: EnumExtensions
        nameWithType: EnumExtensions
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.EnumExtensions
      VB:
      - id: Mapbox.VectorTile.ExtensionMethods.EnumExtensions
        name: EnumExtensions
        nameWithType: EnumExtensions
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.EnumExtensions
    isDefinition: true
    commentId: T:Mapbox.VectorTile.ExtensionMethods.EnumExtensions
  Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson*
        name: ToGeoJson
        nameWithType: VectorTileExtensions.ToGeoJson
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson
      VB:
      - id: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson*
        name: ToGeoJson
        nameWithType: VectorTileExtensions.ToGeoJson
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions.ToGeoJson
  Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions:
    name:
      CSharp:
      - id: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
        name: VectorTileExtensions
        nameWithType: VectorTileExtensions
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
      VB:
      - id: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
        name: VectorTileExtensions
        nameWithType: VectorTileExtensions
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
    isDefinition: true
    commentId: T:Mapbox.VectorTile.ExtensionMethods.VectorTileExtensions
  List{List{Mapbox.VectorTile.Geometry.LatLng}}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Mapbox.VectorTile.Geometry.LatLng
        name: LatLng
        nameWithType: LatLng
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Mapbox.VectorTile.Geometry.LatLng
        name: LatLng
        nameWithType: LatLng
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{List{Mapbox.VectorTile.Geometry.LatLng}}'
  Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84*
        name: GeometryAsWgs84
        nameWithType: VectorTileFeatureExtensions.GeometryAsWgs84
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84
      VB:
      - id: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84*
        name: GeometryAsWgs84
        nameWithType: VectorTileFeatureExtensions.GeometryAsWgs84
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions.GeometryAsWgs84
  Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions:
    name:
      CSharp:
      - id: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
        name: VectorTileFeatureExtensions
        nameWithType: VectorTileFeatureExtensions
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
      VB:
      - id: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
        name: VectorTileFeatureExtensions
        nameWithType: VectorTileFeatureExtensions
        qualifiedName: Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
    isDefinition: true
    commentId: T:Mapbox.VectorTile.ExtensionMethods.VectorTileFeatureExtensions
  Mapbox.VectorTile.ExtensionMethods:
    name:
      CSharp:
      - name: Mapbox.VectorTile.ExtensionMethods
        nameWithType: Mapbox.VectorTile.ExtensionMethods
        qualifiedName: Mapbox.VectorTile.ExtensionMethods
      VB:
      - name: Mapbox.VectorTile.ExtensionMethods
        nameWithType: Mapbox.VectorTile.ExtensionMethods
        qualifiedName: Mapbox.VectorTile.ExtensionMethods
    isDefinition: true
    commentId: N:Mapbox.VectorTile.ExtensionMethods
  List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Mapbox.VectorTile.Geometry.Point2d`1
        name: Point2d
        nameWithType: Point2d
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Mapbox.VectorTile.Geometry.Point2d`1
        name: Point2d
        nameWithType: Point2d
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{List{Mapbox.VectorTile.Geometry.Point2d{System.Int64}}}'
  Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry*
        name: GetGeometry
        nameWithType: DecodeGeometry.GetGeometry
        qualifiedName: Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry
      VB:
      - id: Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry*
        name: GetGeometry
        nameWithType: DecodeGeometry.GetGeometry
        qualifiedName: Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.DecodeGeometry.GetGeometry
  Mapbox.VectorTile.Geometry.Point2d`1:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.Point2d`1
        name: Point2d
        nameWithType: Point2d
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Mapbox.VectorTile.Geometry.Point2d`1
        name: Point2d
        nameWithType: Point2d
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Mapbox.VectorTile.Geometry.Point2d`1
  Mapbox.VectorTile.Geometry.DecodeGeometry.Scale*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.DecodeGeometry.Scale*
        name: Scale
        nameWithType: DecodeGeometry.Scale
        qualifiedName: Mapbox.VectorTile.Geometry.DecodeGeometry.Scale
      VB:
      - id: Mapbox.VectorTile.Geometry.DecodeGeometry.Scale*
        name: Scale
        nameWithType: DecodeGeometry.Scale
        qualifiedName: Mapbox.VectorTile.Geometry.DecodeGeometry.Scale
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.DecodeGeometry.Scale
  Mapbox.VectorTile.Geometry.DecodeGeometry:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.DecodeGeometry
        name: DecodeGeometry
        nameWithType: DecodeGeometry
        qualifiedName: Mapbox.VectorTile.Geometry.DecodeGeometry
      VB:
      - id: Mapbox.VectorTile.Geometry.DecodeGeometry
        name: DecodeGeometry
        nameWithType: DecodeGeometry
        qualifiedName: Mapbox.VectorTile.Geometry.DecodeGeometry
    isDefinition: true
    commentId: T:Mapbox.VectorTile.Geometry.DecodeGeometry
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  System.ValueType.Equals(System.Object):
    name:
      CSharp:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        qualifiedName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.Equals(System.Object)
  System.ValueType.GetHashCode:
    name:
      CSharp:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        qualifiedName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.GetHashCode
  Mapbox.VectorTile.Geometry.LatLng.Lat*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.LatLng.Lat*
        name: Lat
        nameWithType: LatLng.Lat
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng.Lat
      VB:
      - id: Mapbox.VectorTile.Geometry.LatLng.Lat*
        name: Lat
        nameWithType: LatLng.Lat
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng.Lat
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.LatLng.Lat
  Mapbox.VectorTile.Geometry.LatLng.Lng*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.LatLng.Lng*
        name: Lng
        nameWithType: LatLng.Lng
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng.Lng
      VB:
      - id: Mapbox.VectorTile.Geometry.LatLng.Lng*
        name: Lng
        nameWithType: LatLng.Lng
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng.Lng
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.LatLng.Lng
  System.ValueType.ToString:
    name:
      CSharp:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        qualifiedName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ValueType
    commentId: M:System.ValueType.ToString
  Mapbox.VectorTile.Geometry.LatLng.ToString*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.LatLng.ToString*
        name: ToString
        nameWithType: LatLng.ToString
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng.ToString
      VB:
      - id: Mapbox.VectorTile.Geometry.LatLng.ToString*
        name: ToString
        nameWithType: LatLng.ToString
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng.ToString
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.LatLng.ToString
  Mapbox.VectorTile.Geometry.LatLng:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.LatLng
        name: LatLng
        nameWithType: LatLng
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng
      VB:
      - id: Mapbox.VectorTile.Geometry.LatLng
        name: LatLng
        nameWithType: LatLng
        qualifiedName: Mapbox.VectorTile.Geometry.LatLng
    isDefinition: true
    parent: Mapbox.VectorTile.Geometry
    commentId: T:Mapbox.VectorTile.Geometry.LatLng
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  Mapbox.VectorTile.Geometry.Point2d`1.#ctor*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.Point2d`1.#ctor*
        name: Point2d
        nameWithType: Point2d<T>.Point2d
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d<T>.Point2d
      VB:
      - id: Mapbox.VectorTile.Geometry.Point2d`1.#ctor*
        name: Point2d
        nameWithType: Point2d(Of T).Point2d
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d(Of T).Point2d
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.Point2d`1.#ctor
  Mapbox.VectorTile.Geometry.Point2d`1.ToLngLat*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.Point2d`1.ToLngLat*
        name: ToLngLat
        nameWithType: Point2d<T>.ToLngLat
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d<T>.ToLngLat
      VB:
      - id: Mapbox.VectorTile.Geometry.Point2d`1.ToLngLat*
        name: ToLngLat
        nameWithType: Point2d(Of T).ToLngLat
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d(Of T).ToLngLat
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.Point2d`1.ToLngLat
  Mapbox.VectorTile.Geometry.Point2d`1.ToString*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.Point2d`1.ToString*
        name: ToString
        nameWithType: Point2d<T>.ToString
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d<T>.ToString
      VB:
      - id: Mapbox.VectorTile.Geometry.Point2d`1.ToString*
        name: ToString
        nameWithType: Point2d(Of T).ToString
        qualifiedName: Mapbox.VectorTile.Geometry.Point2d(Of T).ToString
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.Point2d`1.ToString
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries*:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries*
        name: ClipGeometries
        nameWithType: UtilGeom.ClipGeometries
        qualifiedName: Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries
      VB:
      - id: Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries*
        name: ClipGeometries
        nameWithType: UtilGeom.ClipGeometries
        qualifiedName: Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries
    isDefinition: true
    commentId: Overload:Mapbox.VectorTile.Geometry.UtilGeom.ClipGeometries
  Mapbox.VectorTile.Geometry.UtilGeom:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Geometry.UtilGeom
        name: UtilGeom
        nameWithType: UtilGeom
        qualifiedName: Mapbox.VectorTile.Geometry.UtilGeom
      VB:
      - id: Mapbox.VectorTile.Geometry.UtilGeom
        name: UtilGeom
        nameWithType: UtilGeom
        qualifiedName: Mapbox.VectorTile.Geometry.UtilGeom
    isDefinition: true
    commentId: T:Mapbox.VectorTile.Geometry.UtilGeom
  Mapbox.VectorTile.Contants:
    name:
      CSharp:
      - name: Mapbox.VectorTile.Contants
        nameWithType: Mapbox.VectorTile.Contants
        qualifiedName: Mapbox.VectorTile.Contants
      VB:
      - name: Mapbox.VectorTile.Contants
        nameWithType: Mapbox.VectorTile.Contants
        qualifiedName: Mapbox.VectorTile.Contants
    isDefinition: true
    commentId: N:Mapbox.VectorTile.Contants
  Mapbox.VectorTile.Contants.WireTypes:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Contants.WireTypes
        name: WireTypes
        nameWithType: WireTypes
        qualifiedName: Mapbox.VectorTile.Contants.WireTypes
      VB:
      - id: Mapbox.VectorTile.Contants.WireTypes
        name: WireTypes
        nameWithType: WireTypes
        qualifiedName: Mapbox.VectorTile.Contants.WireTypes
    isDefinition: true
    parent: Mapbox.VectorTile.Contants
    commentId: T:Mapbox.VectorTile.Contants.WireTypes
  Mapbox.VectorTile.Contants.Commands:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Contants.Commands
        name: Commands
        nameWithType: Commands
        qualifiedName: Mapbox.VectorTile.Contants.Commands
      VB:
      - id: Mapbox.VectorTile.Contants.Commands
        name: Commands
        nameWithType: Commands
        qualifiedName: Mapbox.VectorTile.Contants.Commands
    isDefinition: true
    parent: Mapbox.VectorTile.Contants
    commentId: T:Mapbox.VectorTile.Contants.Commands
  Mapbox.VectorTile.Contants.TileType:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Contants.TileType
        name: TileType
        nameWithType: TileType
        qualifiedName: Mapbox.VectorTile.Contants.TileType
      VB:
      - id: Mapbox.VectorTile.Contants.TileType
        name: TileType
        nameWithType: TileType
        qualifiedName: Mapbox.VectorTile.Contants.TileType
    isDefinition: true
    parent: Mapbox.VectorTile.Contants
    commentId: T:Mapbox.VectorTile.Contants.TileType
  Mapbox.VectorTile.Contants.LayerType:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Contants.LayerType
        name: LayerType
        nameWithType: LayerType
        qualifiedName: Mapbox.VectorTile.Contants.LayerType
      VB:
      - id: Mapbox.VectorTile.Contants.LayerType
        name: LayerType
        nameWithType: LayerType
        qualifiedName: Mapbox.VectorTile.Contants.LayerType
    isDefinition: true
    parent: Mapbox.VectorTile.Contants
    commentId: T:Mapbox.VectorTile.Contants.LayerType
  Mapbox.VectorTile.Contants.FeatureType:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Contants.FeatureType
        name: FeatureType
        nameWithType: FeatureType
        qualifiedName: Mapbox.VectorTile.Contants.FeatureType
      VB:
      - id: Mapbox.VectorTile.Contants.FeatureType
        name: FeatureType
        nameWithType: FeatureType
        qualifiedName: Mapbox.VectorTile.Contants.FeatureType
    isDefinition: true
    parent: Mapbox.VectorTile.Contants
    commentId: T:Mapbox.VectorTile.Contants.FeatureType
  Mapbox.VectorTile.Contants.ValueType:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Contants.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: Mapbox.VectorTile.Contants.ValueType
      VB:
      - id: Mapbox.VectorTile.Contants.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: Mapbox.VectorTile.Contants.ValueType
    isDefinition: true
    parent: Mapbox.VectorTile.Contants
    commentId: T:Mapbox.VectorTile.Contants.ValueType
  Dictionary{System.Int32,System.String}:
    name:
      CSharp:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        qualifiedName: Dictionary
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Dictionary`2
    commentId: '!:Dictionary{System.Int32,System.String}'
  Mapbox.VectorTile.Contants.ConstantsAsDictionary:
    name:
      CSharp:
      - id: Mapbox.VectorTile.Contants.ConstantsAsDictionary
        name: ConstantsAsDictionary
        nameWithType: ConstantsAsDictionary
        qualifiedName: Mapbox.VectorTile.Contants.ConstantsAsDictionary
      VB:
      - id: Mapbox.VectorTile.Contants.ConstantsAsDictionary
        name: ConstantsAsDictionary
        nameWithType: ConstantsAsDictionary
        qualifiedName: Mapbox.VectorTile.Contants.ConstantsAsDictionary
    isDefinition: true
    commentId: T:Mapbox.VectorTile.Contants.ConstantsAsDictionary
